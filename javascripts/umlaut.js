// Generated by CoffeeScript 1.6.3
(function() {
  var article, aside, command, commands, data, drag, element, element_add, force, height, link, load, name, save, svg, sync, tick, width, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  this.Element = (function() {
    function Element(x, y, text, fixed) {
      this.x = x;
      this.y = y;
      this.text = text;
      this.fixed = fixed != null ? fixed : true;
      this._margin = {
        x: 10,
        y: 5
      };
    }

    Element.prototype.center = function() {
      return {
        x: this.x + (this._txt_bbox && this._txt_bbox.width || 0) / 2 + this._margin.x,
        y: this.y + (this._txt_bbox && this._txt_bbox.height || 0) / 2 + this._margin.y
      };
    };

    Element.prototype.width = function() {
      return this._txt_bbox.width + 2 * this._margin.x;
    };

    Element.prototype.height = function() {
      return this._txt_bbox.height + 2 * this._margin.y;
    };

    Element.prototype.direction = function(other) {
      var delta;
      delta = this.height() / this.width();
      if (this.x <= other.x && this.y <= other.y) {
        if (other.y > delta * (other.x - this.x) + this.y) {
          return 'S';
        } else {
          return 'E';
        }
      }
      if (this.x >= other.x && this.y <= other.y) {
        if (other.y > delta * (this.x - other.x) + this.y) {
          return 'S';
        } else {
          return 'O';
        }
      }
      if (this.x <= other.x && this.y >= other.y) {
        if (other.y > delta * (this.x - other.x) + this.y) {
          return 'E';
        } else {
          return 'N';
        }
      }
      if (this.x >= other.x && this.y >= other.y) {
        if (other.y > delta * (other.x - this.x) + this.y) {
          return 'O';
        } else {
          return 'N';
        }
      }
    };

    Element.prototype.anchor = function(other) {
      var rv;
      rv = {
        direction: this.direction(other)
      };
      switch (rv.direction) {
        case 'N':
          rv.x = this.x + this.width() / 2;
          rv.y = this.y;
          break;
        case 'S':
          rv.x = this.x + this.width() / 2;
          rv.y = this.y + this.height();
          break;
        case 'E':
          rv.x = this.x + this.width();
          rv.y = this.y + this.height() / 2;
          break;
        case 'O':
          rv.x = this.x;
          rv.y = this.y + this.height() / 2;
      }
      return rv;
    };

    Element.prototype.objectify = function() {
      return {
        name: this.constructor.name,
        x: this.x,
        y: this.y,
        text: this.text,
        fixed: this.fixed
      };
    };

    return Element;

  })();

  this.Square = (function(_super) {
    __extends(Square, _super);

    function Square() {
      _ref = Square.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Square.prototype.path = function() {
      return "M 0 0 L " + (this.width()) + " 0 L " + (this.width()) + " " + (this.height()) + " L 0 " + (this.height()) + " z";
    };

    return Square;

  })(Element);

  this.Lozenge = (function(_super) {
    __extends(Lozenge, _super);

    function Lozenge() {
      _ref1 = Lozenge.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Lozenge.prototype.path = function() {
      return "M -5 0 L " + (this.width() - 5) + " 0 L " + (this.width() + 5) + " " + (this.height()) + " L 5 " + (this.height()) + " z";
    };

    return Lozenge;

  })(Element);

  this.Link = (function() {
    function Link(elt1, elt2) {
      this.elt1 = elt1;
      this.elt2 = elt2;
      this.target = __bind(this.target, this);
      this.source = __bind(this.source, this);
    }

    Link.prototype.source = function() {
      return this.elt1.anchor(this.elt2);
    };

    Link.prototype.target = function() {
      return this.elt2.anchor(this.elt1);
    };

    Link.prototype.objectify = function() {
      return {
        name: this.constructor.name,
        elt1: data.elts.indexOf(this.elt1),
        elt2: data.elts.indexOf(this.elt2)
      };
    };

    Link.prototype.path = function() {
      var path, source, target, x1, x2, xm, y1, y2, ym;
      source = this.source();
      x1 = source.x;
      y1 = source.y;
      target = this.target();
      x2 = target.x;
      y2 = target.y;
      path = "M " + x1 + " " + y1 + " C";
      xm = .5 * (x1 + x2);
      ym = .5 * (y1 + y2);
      if (source.direction === 'N' || source.direction === 'S') {
        path = "" + path + " " + x1 + " " + ym;
      } else {
        path = "" + path + " " + xm + " " + y1;
      }
      if (target.direction === 'N' || target.direction === 'S') {
        path = "" + path + " " + x2 + " " + ym;
      } else {
        path = "" + path + " " + xm + " " + y2;
      }
      return "" + path + " " + x2 + " " + y2;
    };

    return Link;

  })();

  this.data = data = {};

  this.state = {
    selection: [],
    mouse: {
      x: 0,
      y: 0
    }
  };

  this.combinations = function(elts, n) {
    var f, result;
    if (elts.length < n) {
      return [];
    }
    if (elts.length === n) {
      return [elts];
    }
    result = [];
    f = function(prefix, elts) {
      var combination, i, _results;
      i = 0;
      _results = [];
      while (i < elts.length) {
        combination = prefix.concat(elts[i]);
        if (combination.length === n) {
          result.push(combination);
        }
        f(combination, elts.slice(i + 1));
        _results.push(i++);
      }
      return _results;
    };
    f([], elts);
    return result;
  };

  load = function() {
    var elt, lnk, _i, _j, _len, _len1, _ref2, _ref3;
    data.elts = [];
    data.lnks = [];
    _ref2 = JSON.parse(localStorage.getItem('elts') || '[]');
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      elt = _ref2[_i];
      data.elts.push(new _this[elt.name](elt.x, elt.y, elt.text, elt.fixed));
    }
    _ref3 = JSON.parse(localStorage.getItem('lnks') || '[]');
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      lnk = _ref3[_j];
      data.lnks.push(new _this[lnk.name](data.elts[lnk.elt1], data.elts[lnk.elt2]));
    }
    return state.selection = [];
  };

  save = function() {
    localStorage.setItem('elts', JSON.stringify(data.elts.map(function(elt) {
      return elt.objectify();
    })));
    return localStorage.setItem('lnks', JSON.stringify(data.lnks.map(function(lnk) {
      return lnk.objectify();
    })));
  };

  load();

  article = d3.select("article");

  width = article.node().clientWidth;

  height = article.node().clientHeight;

  svg = article.append("svg").attr("width", width).attr("height", height);

  svg.append("svg:defs").append("svg:marker").attr("id", 'arrow').attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerUnits", 'strokeWidth').attr("markerWidth", 10).attr("markerHeight", 10).attr("orient", "auto").append("svg:path").attr("d", "M 0 0 L 10 5 L 0 10");

  force = d3.layout.force().gravity(.2).linkDistance(100).charge(-2000).size([width, height]);

  drag = force.drag().on("dragstart", function(elt) {
    if (d3.event.sourceEvent.shiftKey) {
      state.selection.push(elt);
    } else {
      d3.selectAll('.selected').classed('selected', false);
      state.selection = [elt];
    }
    return d3.select(this).classed('selected', true);
  });

  element = null;

  link = null;

  svg.on('click', function() {
    if (d3.event.target === this) {
      d3.selectAll('.selected').classed('selected', false);
      return state.selection = [];
    }
  });

  svg.append('g').attr('class', 'links');

  svg.append('g').attr('class', 'elements');

  sync = function() {
    var g;
    force.nodes(data.elts).links(data.lnks);
    link = svg.select('g.links').selectAll('path.link').data(data.lnks);
    link.enter().append("path").attr("class", "link").attr("marker-end", "url(#arrow)").on('click', function() {
      return d3.select(this).classed('selected', true);
    });
    element = svg.select('g.elements').selectAll('g.element').data(data.elts);
    g = element.enter().append('g').attr('class', 'element').call(drag);
    g.append('path').attr('class', 'shape');
    g.append('text').attr('x', function(elt) {
      return elt._margin.x;
    }).attr('y', function(elt) {
      return elt._margin.y;
    });
    element.select('text').text(function(elt) {
      return elt.text;
    }).each(function(elt) {
      return elt._txt_bbox = this.getBBox();
    });
    element.select('path.shape').attr('d', function(elt) {
      return elt.path();
    });
    element.exit().remove();
    link.exit().remove();
    tick();
    return force.start();
  };

  tick = function() {
    var elt, need_force, _i, _len, _ref2;
    need_force = false;
    _ref2 = data.elts;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      elt = _ref2[_i];
      if (!elt.fixed) {
        need_force = true;
        break;
      }
    }
    need_force = need_force && (force.alpha() || 1) > .03;
    if (!need_force) {
      force.stop();
    }
    element.attr("transform", (function(elt) {
      return "translate(" + elt.x + "," + elt.y + ")";
    })).each(function(elt) {
      return d3.select(this).classed('moving', !elt.fixed);
    });
    return link.attr("d", function(elt) {
      return elt.path();
    });
  };

  element_add = function(type) {
    var elt, new_elt, _i, _len, _ref2;
    new_elt = new type(void 0, void 0, 'New element', false);
    data.elts.push(new_elt);
    _ref2 = state.selection;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      elt = _ref2[_i];
      data.lnks.push(new Link(elt, new_elt));
    }
    return sync();
  };

  commands = {
    reorganize: {
      fun: function() {
        var elt, sel, _i, _len;
        sel = state.selection.length > 0 ? state.selection : data.elts;
        for (_i = 0, _len = sel.length; _i < _len; _i++) {
          elt = sel[_i];
          elt.fixed = false;
        }
        return sync();
      },
      label: 'Reorganize',
      hotkey: 'r'
    },
    square: {
      fun: function() {
        return element_add(Square);
      },
      label: 'Add square element',
      hotkey: 's'
    },
    lozenge: {
      fun: function() {
        return element_add(Lozenge);
      },
      label: 'Add lozenge element',
      hotkey: 'z'
    },
    link: {
      fun: function() {
        var combination, _i, _len, _ref2;
        _ref2 = combinations(state.selection, 2);
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          combination = _ref2[_i];
          data.lnks.push(new Link(combination[0], combination[1]));
        }
        return sync();
      },
      label: 'Link elements',
      hotkey: 'l'
    },
    edit: {
      fun: function() {
        var elt, _i, _len, _ref2;
        _ref2 = state.selection;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          elt = _ref2[_i];
          elt.text = prompt("Enter a name for " + elt.text + ":");
        }
        return sync();
      },
      label: 'Edit element text',
      hotkey: 'e'
    },
    select_all: {
      fun: function(e) {
        state.selection = data.elts.slice();
        d3.selectAll('g.element').classed('selected', true);
        return e != null ? e.preventDefault() : void 0;
      },
      label: 'Select all elements',
      hotkey: 'ctrl+a'
    },
    save: {
      fun: function(e) {
        save();
        return e != null ? e.preventDefault() : void 0;
      },
      label: 'Save locally',
      hotkey: 'ctrl+s'
    },
    load: {
      fun: function(e) {
        load();
        sync();
        return e != null ? e.preventDefault() : void 0;
      },
      label: 'Load locally',
      hotkey: 'ctrl+l'
    },
    remove: {
      fun: function() {
        var elt, lnk, _i, _j, _len, _len1, _ref2, _ref3;
        _ref2 = state.selection;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          elt = _ref2[_i];
          data.elts.splice(data.elts.indexOf(elt), 1);
          _ref3 = data.lnks.slice();
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            lnk = _ref3[_j];
            if (elt === lnk.elt1 || elt === lnk.elt2) {
              data.lnks.splice(data.lnks.indexOf(lnk), 1);
            }
          }
        }
        state.selection = [];
        d3.selectAll('g.element').classed('selected', false);
        return sync();
      },
      label: 'Remove elements',
      hotkey: 'del'
    }
  };

  aside = d3.select('aside');

  for (name in commands) {
    command = commands[name];
    aside.append('button').text(command.label).on('click', command.fun);
    Mousetrap.bind(command.hotkey, command.fun);
  }

  force.on('tick', tick).on('end', function() {
    var elt, _i, _len, _ref2;
    _ref2 = data.elts;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      elt = _ref2[_i];
      elt.fixed = true;
    }
    return tick();
  });

  sync();

}).call(this);
