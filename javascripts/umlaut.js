// Generated by CoffeeScript 1.6.3
var Actor, Aggregation, Arrow, Association, BlackArrow, Case, Class, ClassDiagram, Comment, Composition, Container, Database, Decision, Delay, Diagram, Diamond, Diode, Document, Electric, ElectricDiagram, Element, Ellipsis, Flow, FlowChart, Group, HardDisk, IO, Inheritance, InternalStorage, Link, Lozenge, ManualInput, Marker, Mouse, Node, Note, Preparation, Process, Rect, Resistor, SubProcess, Svg, System, Terminator, UseCase, Void, WhiteArrow, WhiteDiamond, Wire, commands, dist, edit, element_add, generate_url, history_pop, init_commands, link_add, list_diagrams, load, mouse_xy, save, uml_elements, uml_links, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  _this = this,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dist = function(o, t) {
  return Math.sqrt(Math.pow(t.x - o.x, 2) + Math.pow(t.y - o.y, 2));
};

Element = (function() {
  function Element(x, y, text, fixed) {
    var _this = this;
    this.x = x;
    this.y = y;
    this.text = text;
    this.fixed = fixed != null ? fixed : true;
    this.margin = {
      x: 10,
      y: 5
    };
    this._width = null;
    this._height = null;
    this._rotation = 0;
    this.anchors = {
      N: function() {
        return {
          x: _this.x,
          y: _this.y - _this.height() / 2
        };
      },
      S: function() {
        return {
          x: _this.x,
          y: _this.y + _this.height() / 2
        };
      },
      E: function() {
        return {
          x: _this.x + _this.width() / 2,
          y: _this.y
        };
      },
      W: function() {
        return {
          x: _this.x - _this.width() / 2,
          y: _this.y
        };
      }
    };
  }

  Element.prototype.pos = function() {
    return {
      x: this.x,
      y: this.y
    };
  };

  Element.prototype.set_txt_bbox = function(bbox) {
    return this._txt_bbox = bbox;
  };

  Element.prototype.txt_width = function() {
    return this._txt_bbox.width + 2 * this.margin.x;
  };

  Element.prototype.txt_height = function() {
    return this._txt_bbox.height + 2 * this.margin.y;
  };

  Element.prototype.txt_x = function() {
    return 0;
  };

  Element.prototype.txt_y = function() {
    return -this._txt_bbox.height / 2;
  };

  Element.prototype.width = function(w) {
    if (w == null) {
      w = null;
    }
    if (w !== null) {
      this._width = w;
    }
    return Math.max(this._width || 0, this.txt_width());
  };

  Element.prototype.height = function(h) {
    if (h == null) {
      h = null;
    }
    if (h !== null) {
      this._height = h;
    }
    return Math.max(this._height || 0, this.txt_height());
  };

  Element.prototype.direction = function(x, y) {
    var delta;
    delta = this.height() / this.width();
    if (this.x <= x && this.y <= y) {
      if (y > delta * (x - this.x) + this.y) {
        return 'S';
      } else {
        return 'E';
      }
    }
    if (this.x >= x && this.y <= y) {
      if (y > delta * (this.x - x) + this.y) {
        return 'S';
      } else {
        return 'W';
      }
    }
    if (this.x <= x && this.y >= y) {
      if (y > delta * (this.x - x) + this.y) {
        return 'E';
      } else {
        return 'N';
      }
    }
    if (this.x >= x && this.y >= y) {
      if (y > delta * (x - this.x) + this.y) {
        return 'W';
      } else {
        return 'N';
      }
    }
  };

  Element.prototype["in"] = function(rect) {
    var _ref, _ref1;
    return (rect.x < (_ref = this.x) && _ref < rect.x + rect.width) && (rect.y < (_ref1 = this.y) && _ref1 < rect.y + rect.height);
  };

  Element.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      x: this.x,
      y: this.y,
      width: this._width,
      height: this._height,
      text: this.text,
      fixed: this.fixed
    };
  };

  return Element;

})();

Mouse = (function(_super) {
  __extends(Mouse, _super);

  function Mouse() {
    _ref = Mouse.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Mouse.prototype.width = function() {
    return 1;
  };

  Mouse.prototype.height = function() {
    return 1;
  };

  Mouse.prototype.weight = 1;

  return Mouse;

})(Element);

Marker = (function() {
  function Marker() {
    this.id = this.constructor.name;
  }

  return Marker;

})();

Void = (function(_super) {
  __extends(Void, _super);

  function Void() {
    _ref1 = Void.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Void.prototype.path = function() {
    return 'M 0 0';
  };

  return Void;

})(Marker);

Arrow = (function(_super) {
  __extends(Arrow, _super);

  function Arrow() {
    _ref2 = Arrow.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  Arrow.prototype.path = function() {
    return 'M 10 0 L 20 5 L 10 10';
  };

  return Arrow;

})(Marker);

BlackArrow = (function(_super) {
  __extends(BlackArrow, _super);

  function BlackArrow() {
    _ref3 = BlackArrow.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  BlackArrow.prototype.path = function() {
    return "" + (BlackArrow.__super__.path.call(this)) + " z";
  };

  return BlackArrow;

})(Arrow);

Link = (function() {
  Link.marker = new Void();

  Link.type = 'full';

  Link.prototype.text_margin = 10;

  function Link(source, target, text) {
    this.source = source;
    this.target = target;
    this.a1 = this.a2 = 0;
    this.text = {
      source: (text != null ? text.source : void 0) || '',
      target: (text != null ? text.target : void 0) || ''
    };
  }

  Link.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      source: diagram.nodes().indexOf(this.source),
      target: diagram.nodes().indexOf(this.target),
      text: this.text
    };
  };

  Link.prototype.nearest = function(pos) {
    if (dist(pos, this.source) < dist(pos, this.target)) {
      return this.source;
    } else {
      return this.target;
    }
  };

  Link.prototype.path = function() {
    var c1, c2, horz, m, mid, path, vert, _ref10, _ref11, _ref12, _ref13, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    c1 = this.source.pos();
    c2 = this.target.pos();
    if (void 0 === c1.x || void 0 === c1.y || void 0 === c2.x || void 0 === c2.y) {
      return 'M 0 0';
    }
    this.d1 = this.source.direction(c2.x, c2.y);
    this.d2 = this.target.direction(c1.x, c1.y);
    this.a1 = this.source.anchors[this.d1]();
    this.a2 = this.target.anchors[this.d2]();
    path = "M " + this.a1.x + " " + this.a1.y;
    vert = ['N', 'S'];
    horz = ['E', 'W'];
    if (diagram.linkstyle === 'curve') {
      path = "" + path + " C";
      m = {
        x: .5 * (this.a1.x + this.a2.x),
        y: .5 * (this.a1.y + this.a2.y)
      };
      if (_ref4 = this.d1, __indexOf.call(vert, _ref4) >= 0) {
        path = "" + path + " " + this.a1.x + " " + m.y;
      } else {
        path = "" + path + " " + m.x + " " + this.a1.y;
      }
      if (_ref5 = this.d2, __indexOf.call(vert, _ref5) >= 0) {
        path = "" + path + " " + this.a2.x + " " + m.y;
      } else {
        path = "" + path + " " + m.x + " " + this.a2.y;
      }
    } else if (diagram.linkstyle === 'diagonal') {
      path = "" + path + " L";
    } else if (diagram.linkstyle === 'rectangular') {
      path = "" + path + " L";
      if ((_ref6 = this.d1, __indexOf.call(vert, _ref6) >= 0) && (_ref7 = this.d2, __indexOf.call(horz, _ref7) >= 0)) {
        path = "" + path + " " + this.a1.x + " " + this.a2.y + " L";
      } else if ((_ref8 = this.d1, __indexOf.call(horz, _ref8) >= 0) && (_ref9 = this.d2, __indexOf.call(vert, _ref9) >= 0)) {
        path = "" + path + " " + this.a2.x + " " + this.a1.y + " L";
      } else if ((_ref10 = this.d1, __indexOf.call(horz, _ref10) >= 0) && (_ref11 = this.d2, __indexOf.call(horz, _ref11) >= 0)) {
        mid = this.a1.x + .5 * (this.a2.x - this.a1.x);
        path = "" + path + " " + mid + " " + this.a1.y + " L " + mid + " " + this.a2.y + " L";
      } else if ((_ref12 = this.d1, __indexOf.call(vert, _ref12) >= 0) && (_ref13 = this.d2, __indexOf.call(vert, _ref13) >= 0)) {
        mid = this.a1.y + .5 * (this.a2.y - this.a1.y);
        path = "" + path + " " + this.a1.x + " " + mid + " L " + this.a2.x + " " + mid + " L";
      }
    }
    return "" + path + " " + this.a2.x + " " + this.a2.y;
  };

  return Link;

})();

Diagram = (function() {
  Diagram.diagrams = {};

  function Diagram() {
    this.title = 'Untitled ' + this.label;
    this.linkstyle = 'rectangular';
    this.zoom = {
      scale: 1,
      translate: [0, 0]
    };
    this.elements = [];
    this.links = [];
    this.groups = [];
    this.snap = 25;
    this.freemode = false;
    this.types = {};
    this.selection = [];
    this.linking = [];
    this.last_types = {
      link: null,
      element: null,
      group: null
    };
    this.mouse = new Mouse(0, 0, '');
    this.dragging = false;
    this.groupping = false;
  }

  Diagram.prototype.markers = function() {
    var key, markers, type, val, _i, _len, _ref4, _results;
    markers = {};
    _ref4 = this.types.links;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      type = _ref4[_i];
      markers[type.marker.id] = type.marker;
    }
    _results = [];
    for (key in markers) {
      val = markers[key];
      _results.push(val);
    }
    return _results;
  };

  Diagram.prototype.group = function(name) {
    var grp, _i, _len, _ref4;
    _ref4 = this.types.groups;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      grp = _ref4[_i];
      if (grp.name === name) {
        return grp;
      }
    }
  };

  Diagram.prototype.element = function(name) {
    var elt, _i, _len, _ref4;
    _ref4 = this.types.elements;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      elt = _ref4[_i];
      if (elt.name === name) {
        return elt;
      }
    }
  };

  Diagram.prototype.link = function(name) {
    var lnk, _i, _len, _ref4;
    _ref4 = this.types.links;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      lnk = _ref4[_i];
      if (lnk.name === name) {
        return lnk;
      }
    }
  };

  Diagram.prototype.nodes = function() {
    return this.elements.concat(this.groups);
  };

  Diagram.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      title: this.title,
      linkstyle: this.linkstyle,
      zoom: this.zoom,
      freemode: this.freemode,
      elements: this.elements.map(function(elt) {
        return elt.objectify();
      }),
      groups: this.groups.map(function(grp) {
        return grp.objectify();
      }),
      links: this.links.map(function(lnk) {
        return lnk.objectify();
      })
    };
  };

  Diagram.prototype.hash = function() {
    return btoa(JSON.stringify(this.objectify()));
  };

  Diagram.prototype.loads = function(obj) {
    var element, element_type, elt, group, group_type, grp, link, lnk, _i, _j, _k, _len, _len1, _len2, _ref4, _ref5, _ref6, _results;
    if (obj.title) {
      this.title = obj.title;
    }
    if (obj.linkstyle) {
      this.linkstyle = obj.linkstyle;
    }
    if (obj.zoom) {
      this.zoom = obj.zoom;
    }
    if (obj.freemode) {
      this.freemode = obj.freemode;
    }
    _ref4 = obj.groups || [];
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      grp = _ref4[_i];
      group_type = this.group(grp.name);
      group = new group_type(grp.x, grp.y, grp.text, grp.fixed);
      group._width = grp.width;
      group._height = grp.height;
      this.groups.push(group);
    }
    _ref5 = obj.elements;
    for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
      elt = _ref5[_j];
      element_type = this.element(elt.name);
      element = new element_type(elt.x, elt.y, elt.text, elt.fixed);
      element._width = elt.width;
      element._height = elt.height;
      this.elements.push(element);
    }
    _ref6 = obj.links;
    _results = [];
    for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
      lnk = _ref6[_k];
      link = this.link(lnk.name);
      _results.push(this.links.push(new link(this.nodes()[lnk.source], this.nodes()[lnk.target], lnk.text)));
    }
    return _results;
  };

  return Diagram;

})();

Rect = (function(_super) {
  __extends(Rect, _super);

  function Rect() {
    _ref4 = Rect.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  Rect.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + w2 + " " + (-h2) + "         L " + w2 + " " + h2 + "         L " + (-w2) + " " + h2 + "         z";
  };

  return Rect;

})(Element);

Ellipsis = (function(_super) {
  __extends(Ellipsis, _super);

  function Ellipsis() {
    _ref5 = Ellipsis.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  Ellipsis.prototype.txt_width = function() {
    return 2 * Ellipsis.__super__.txt_width.call(this) / Math.sqrt(2);
  };

  Ellipsis.prototype.txt_height = function() {
    return 2 * Ellipsis.__super__.txt_height.call(this) / Math.sqrt(2);
  };

  Ellipsis.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " 0         A " + w2 + " " + h2 + " 0 1 1 " + w2 + " 0         A " + w2 + " " + h2 + " 0 1 1 " + (-w2) + " 0        ";
  };

  return Ellipsis;

})(Element);

Note = (function(_super) {
  __extends(Note, _super);

  function Note() {
    _ref6 = Note.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  Note.prototype.shift = 15;

  Note.prototype.txt_width = function() {
    return Note.__super__.txt_width.call(this) + this.shift;
  };

  Note.prototype.txt_x = function() {
    return Note.__super__.txt_x.call(this) - this.shift / 2;
  };

  Note.prototype.txt_y = function() {
    return Note.__super__.txt_y.call(this);
  };

  Note.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + (w2 - this.shift) + " " + (-h2) + "         L " + w2 + " " + (-h2 + this.shift) + "         L " + w2 + " " + h2 + "         L " + (-w2) + " " + h2 + "         L " + (-w2) + " " + (-h2 + this.shift) + "         z         M " + w2 + " " + (-h2 + this.shift) + "         L " + (w2 - this.shift) + " " + (-h2 + this.shift) + "         L " + (w2 - this.shift) + " " + (-h2) + "        ";
  };

  return Note;

})(Element);

Lozenge = (function(_super) {
  __extends(Lozenge, _super);

  function Lozenge() {
    _ref7 = Lozenge.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  Lozenge.prototype.txt_width = function() {
    var ow;
    ow = Lozenge.__super__.txt_width.call(this);
    return ow + Math.sqrt(ow * Lozenge.__super__.txt_height.apply(this));
  };

  Lozenge.prototype.txt_height = function() {
    var oh;
    oh = Lozenge.__super__.txt_height.call(this);
    return oh + Math.sqrt(oh * Lozenge.__super__.txt_width.apply(this));
  };

  Lozenge.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " 0         L 0 " + (-h2) + "         L " + w2 + " 0         L 0 " + h2 + "         z";
  };

  return Lozenge;

})(Element);

WhiteArrow = (function(_super) {
  __extends(WhiteArrow, _super);

  function WhiteArrow() {
    _ref8 = WhiteArrow.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  return WhiteArrow;

})(BlackArrow);

Diamond = (function(_super) {
  __extends(Diamond, _super);

  function Diamond() {
    _ref9 = Diamond.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  Diamond.prototype.path = function() {
    return 'M 0 5 L 10 0 L 20 5 L 10 10 z';
  };

  return Diamond;

})(Marker);

WhiteDiamond = (function(_super) {
  __extends(WhiteDiamond, _super);

  function WhiteDiamond() {
    _ref10 = WhiteDiamond.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  return WhiteDiamond;

})(Diamond);

Association = (function(_super) {
  __extends(Association, _super);

  function Association() {
    _ref11 = Association.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  Association.marker = new BlackArrow();

  return Association;

})(Link);

Inheritance = (function(_super) {
  __extends(Inheritance, _super);

  function Inheritance() {
    _ref12 = Inheritance.__super__.constructor.apply(this, arguments);
    return _ref12;
  }

  Inheritance.marker = new WhiteArrow();

  return Inheritance;

})(Link);

Composition = (function(_super) {
  __extends(Composition, _super);

  function Composition() {
    _ref13 = Composition.__super__.constructor.apply(this, arguments);
    return _ref13;
  }

  Composition.marker = new Diamond();

  return Composition;

})(Link);

Comment = (function(_super) {
  __extends(Comment, _super);

  function Comment() {
    _ref14 = Comment.__super__.constructor.apply(this, arguments);
    return _ref14;
  }

  Comment.marker = new Arrow();

  Comment.type = 'dashed';

  return Comment;

})(Link);

Aggregation = (function(_super) {
  __extends(Aggregation, _super);

  function Aggregation() {
    _ref15 = Aggregation.__super__.constructor.apply(this, arguments);
    return _ref15;
  }

  Aggregation.marker = new WhiteDiamond();

  return Aggregation;

})(Link);

uml_links = [Association, Inheritance, Aggregation, Composition, Comment];

uml_elements = [Note];

Group = (function(_super) {
  __extends(Group, _super);

  function Group() {
    _ref16 = Group.__super__.constructor.apply(this, arguments);
    return _ref16;
  }

  Group.prototype.contains = function(elt) {
    var h2, w2, _ref17, _ref18;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return (this.x - w2 < (_ref17 = elt.x) && _ref17 < this.x + w2) && (this.y - h2 < (_ref18 = elt.y) && _ref18 < this.y + h2);
  };

  Group.prototype.txt_y = function() {
    return -this.height() / 2 + this.margin.y;
  };

  Group.prototype.path = function() {
    var h2, h2l, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    h2l = -h2 + this.txt_height() + this.margin.y;
    return "M " + (-w2) + " " + (-h2) + "         L " + w2 + " " + (-h2) + "         L " + w2 + " " + h2l + "         L " + (-w2) + " " + h2l + "         z         M " + w2 + " " + h2l + "         L " + w2 + " " + h2 + "         L " + (-w2) + " " + h2 + "         L " + (-w2) + " " + h2l + "        ";
  };

  return Group;

})(Element);

Process = (function(_super) {
  __extends(Process, _super);

  function Process() {
    _ref17 = Process.__super__.constructor.apply(this, arguments);
    return _ref17;
  }

  return Process;

})(Rect);

IO = (function(_super) {
  __extends(IO, _super);

  function IO() {
    var _this = this;
    IO.__super__.constructor.apply(this, arguments);
    this.anchors.N = function() {
      return {
        x: _this.x - _this.height() / 4,
        y: _this.y - _this.height() / 2
      };
    };
    this.anchors.S = function() {
      return {
        x: _this.x + _this.height() / 4,
        y: _this.y + _this.height() / 2
      };
    };
    this.anchors.E = function() {
      return {
        x: _this.x + _this.width() / 2 - _this.height() / 4,
        y: _this.y
      };
    };
    this.anchors.W = function() {
      return {
        x: _this.x - _this.width() / 2 + _this.height() / 4,
        y: _this.y
      };
    };
  }

  IO.prototype.txt_width = function() {
    return IO.__super__.txt_width.call(this) + this.height();
  };

  IO.prototype.path = function() {
    var h2, lw2, w2;
    w2 = (this.width() - this.height()) / 2;
    h2 = this.height() / 2;
    lw2 = this.width() / 2;
    return "M " + (-lw2) + " " + (-h2) + "         L " + w2 + " " + (-h2) + "         L " + lw2 + " " + h2 + "         L " + (-w2) + " " + h2 + "         z";
  };

  return IO;

})(Element);

Terminator = (function(_super) {
  __extends(Terminator, _super);

  function Terminator() {
    _ref18 = Terminator.__super__.constructor.apply(this, arguments);
    return _ref18;
  }

  Terminator.prototype.path = function() {
    var h2, shift, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    shift = Math.min(w2 / 2, h2 / 2);
    return "M " + (-w2 + shift) + " " + (-h2) + "         L " + (w2 - shift) + " " + (-h2) + "         Q " + w2 + " " + (-h2) + " " + w2 + " " + (-h2 + shift) + "         L " + w2 + " " + (h2 - shift) + "         Q " + w2 + " " + h2 + " " + (w2 - shift) + " " + h2 + "         L " + (-w2 + shift) + " " + h2 + "         Q " + (-w2) + " " + h2 + " " + (-w2) + " " + (h2 - shift) + "         L " + (-w2) + " " + (-h2 + shift) + "         Q " + (-w2) + " " + (-h2) + " " + (-w2 + shift) + " " + (-h2);
  };

  return Terminator;

})(Element);

Decision = (function(_super) {
  __extends(Decision, _super);

  function Decision() {
    Decision.__super__.constructor.apply(this, arguments);
    this.margin.x = 0;
    this.margin.y = 2;
  }

  return Decision;

})(Lozenge);

Delay = (function(_super) {
  __extends(Delay, _super);

  function Delay() {
    var _this = this;
    Delay.__super__.constructor.apply(this, arguments);
    this.anchors.N = function() {
      return {
        x: _this.x + _this.txt_x(),
        y: _this.y - _this.height() / 2
      };
    };
    this.anchors.S = function() {
      return {
        x: _this.x + _this.txt_x(),
        y: _this.y + _this.height() / 2
      };
    };
  }

  Delay.prototype.txt_x = function() {
    return Delay.__super__.txt_x.call(this) - this.height() / 4 + this.txt_height() / 6;
  };

  Delay.prototype.txt_width = function() {
    return Math.max(0, Delay.__super__.txt_width.call(this) - this.txt_height() / 3) + this.height() / 2;
  };

  Delay.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + (w2 - h2) + " " + (-h2) + "         A " + h2 + " " + h2 + " 0 1 1 " + (w2 - h2) + " " + h2 + "         L " + (-w2) + " " + h2 + "         z";
  };

  return Delay;

})(Element);

SubProcess = (function(_super) {
  __extends(SubProcess, _super);

  function SubProcess() {
    _ref19 = SubProcess.__super__.constructor.apply(this, arguments);
    return _ref19;
  }

  SubProcess.prototype.shift = 1.2;

  SubProcess.prototype.txt_width = function() {
    return SubProcess.__super__.txt_width.call(this) * this.shift;
  };

  SubProcess.prototype.shift_width = function() {
    return this.width() * (this.shift - 1) / this.shift;
  };

  SubProcess.prototype.path = function() {
    var h2, lw2, w2;
    w2 = this.width() / 2;
    lw2 = w2 - this.shift_width() / 2;
    h2 = this.height() / 2;
    return "" + (SubProcess.__super__.path.call(this)) + "         M " + (-lw2) + " " + (-h2) + "         L " + (-lw2) + " " + h2 + "         M " + lw2 + " " + (-h2) + "         L " + lw2 + " " + h2 + "        ";
  };

  return SubProcess;

})(Process);

Document = (function(_super) {
  __extends(Document, _super);

  function Document() {
    _ref20 = Document.__super__.constructor.apply(this, arguments);
    return _ref20;
  }

  Document.prototype.txt_height = function() {
    return Document.__super__.txt_height.call(this) * 1.25;
  };

  Document.prototype.txt_y = function() {
    return Document.__super__.txt_y.call(this) - this.height() / 16;
  };

  Document.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + w2 + " " + (-h2) + "         L " + w2 + " " + h2 + "         Q " + (w2 / 2) + " " + (h2 / 2) + " 0 " + h2 + "         T " + (-w2) + " " + h2 + "         z";
  };

  return Document;

})(Element);

Database = (function(_super) {
  __extends(Database, _super);

  function Database() {
    _ref21 = Database.__super__.constructor.apply(this, arguments);
    return _ref21;
  }

  Database.prototype.txt_y = function() {
    return Database.__super__.txt_y.call(this) + this.radius() / 2;
  };

  Database.prototype.txt_height = function() {
    return Database.__super__.txt_height.call(this) + 20;
  };

  Database.prototype.radius = function() {
    return Math.min((this.height() - Database.__super__.txt_height.apply(this)) / 4, this.width() / 3);
  };

  Database.prototype.path = function() {
    var h2, r, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    r = this.radius();
    return "M " + (-w2) + " " + (-h2 + r) + "         A " + w2 + " " + r + " 0 1 1 " + w2 + " " + (-h2 + r) + "         A " + w2 + " " + r + " 0 1 1 " + (-w2) + " " + (-h2 + r) + "         M " + w2 + " " + (-h2 + r) + "         L " + w2 + " " + (h2 - r) + "         A " + w2 + " " + r + " 0 1 1 " + (-w2) + " " + (h2 - r) + "         L " + (-w2) + " " + (-h2 + r);
  };

  return Database;

})(Element);

HardDisk = (function(_super) {
  __extends(HardDisk, _super);

  function HardDisk() {
    _ref22 = HardDisk.__super__.constructor.apply(this, arguments);
    return _ref22;
  }

  HardDisk.prototype.txt_x = function() {
    return HardDisk.__super__.txt_x.call(this) - this.radius() / 2;
  };

  HardDisk.prototype.txt_width = function() {
    return HardDisk.__super__.txt_width.call(this) + 20;
  };

  HardDisk.prototype.radius = function() {
    return Math.min((this.width() - HardDisk.__super__.txt_width.apply(this)) / 4, this.height() / 3);
  };

  HardDisk.prototype.path = function() {
    var h2, r, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    r = this.radius();
    return "M " + (w2 - r) + " " + h2 + "         A " + r + " " + h2 + " 0 1 1 " + (w2 - r) + " " + (-h2) + "         A " + r + " " + h2 + " 0 1 1 " + (w2 - r) + " " + h2 + "         L " + (-w2 + r) + " " + h2 + "         A " + r + " " + h2 + " 0 1 1 " + (-w2 + r) + " " + (-h2) + "         L " + (w2 - r) + " " + (-h2) + "        ";
  };

  return HardDisk;

})(Element);

ManualInput = (function(_super) {
  __extends(ManualInput, _super);

  ManualInput.prototype.shift = 2;

  function ManualInput() {
    var _this = this;
    ManualInput.__super__.constructor.apply(this, arguments);
    this.anchors.N = function() {
      return {
        x: _this.x,
        y: _this.y - _this.shift_height() / 2
      };
    };
    this.anchors.W = function() {
      return {
        x: _this.x - _this.width() / 2,
        y: _this.y + _this.shift_height() / 2
      };
    };
  }

  ManualInput.prototype.shift_height = function() {
    return this.height() * (this.shift - 1) / this.shift;
  };

  ManualInput.prototype.txt_height = function() {
    return ManualInput.__super__.txt_height.call(this) * this.shift;
  };

  ManualInput.prototype.txt_y = function() {
    return ManualInput.__super__.txt_y.call(this) + this.shift_height() / 2;
  };

  ManualInput.prototype.path = function() {
    var h2, th2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    th2 = h2 - this.shift_height();
    return "M " + (-w2) + " " + (-th2) + "          L " + w2 + " " + (-h2) + "          L " + w2 + " " + h2 + "          L " + (-w2) + " " + h2 + "          z";
  };

  return ManualInput;

})(Element);

Preparation = (function(_super) {
  __extends(Preparation, _super);

  function Preparation() {
    _ref23 = Preparation.__super__.constructor.apply(this, arguments);
    return _ref23;
  }

  Preparation.prototype.shift = 1.25;

  Preparation.prototype.txt_width = function() {
    return Preparation.__super__.txt_width.call(this) * this.shift;
  };

  Preparation.prototype.shift_width = function() {
    return this.width() * (this.shift - 1) / this.shift;
  };

  Preparation.prototype.path = function() {
    var h2, lw2, w2;
    w2 = this.width() / 2;
    lw2 = w2 - this.shift_width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " 0         L " + (-lw2) + " " + (-h2) + "         L " + lw2 + " " + (-h2) + "         L " + w2 + " 0         L " + lw2 + " " + h2 + "         L " + (-lw2) + " " + h2 + "         z";
  };

  return Preparation;

})(Element);

InternalStorage = (function(_super) {
  __extends(InternalStorage, _super);

  function InternalStorage() {
    _ref24 = InternalStorage.__super__.constructor.apply(this, arguments);
    return _ref24;
  }

  InternalStorage.prototype.hshift = 1.5;

  InternalStorage.prototype.wshift = 1.1;

  InternalStorage.prototype.txt_x = function() {
    return InternalStorage.__super__.txt_x.call(this) + this.shift_width() / 2;
  };

  InternalStorage.prototype.txt_y = function() {
    return InternalStorage.__super__.txt_y.call(this) + this.shift_height() / 2;
  };

  InternalStorage.prototype.txt_width = function() {
    return InternalStorage.__super__.txt_width.call(this) * this.wshift;
  };

  InternalStorage.prototype.txt_height = function() {
    return InternalStorage.__super__.txt_height.call(this) * this.hshift;
  };

  InternalStorage.prototype.shift_width = function() {
    return this.width() * (this.wshift - 1) / this.wshift;
  };

  InternalStorage.prototype.shift_height = function() {
    return this.height() * (this.hshift - 1) / this.hshift;
  };

  InternalStorage.prototype.path = function() {
    var h2, lh2, lw2, w2;
    w2 = this.width() / 2;
    lw2 = w2 - this.shift_width();
    h2 = this.height() / 2;
    lh2 = h2 - this.shift_height();
    return "" + (InternalStorage.__super__.path.call(this)) + "         M " + (-lw2) + " " + (-h2) + "         L " + (-lw2) + " " + h2 + "         M " + (-w2) + " " + (-lh2) + "         L " + w2 + " " + (-lh2) + "        ";
  };

  return InternalStorage;

})(Process);

Flow = (function(_super) {
  __extends(Flow, _super);

  function Flow() {
    _ref25 = Flow.__super__.constructor.apply(this, arguments);
    return _ref25;
  }

  Flow.marker = new BlackArrow();

  return Flow;

})(Link);

Container = (function(_super) {
  __extends(Container, _super);

  function Container() {
    _ref26 = Container.__super__.constructor.apply(this, arguments);
    return _ref26;
  }

  return Container;

})(Group);

FlowChart = (function(_super) {
  __extends(FlowChart, _super);

  FlowChart.prototype.label = 'Flow Chart';

  function FlowChart() {
    FlowChart.__super__.constructor.call(this);
    this.types = {
      elements: [Process, IO, Terminator, Decision, Delay, SubProcess, Document, Database, HardDisk, ManualInput, Preparation, InternalStorage],
      groups: [Container],
      links: [Flow]
    };
  }

  return FlowChart;

})(Diagram);

Diagram.diagrams['FlowChart'] = FlowChart;

Case = (function(_super) {
  __extends(Case, _super);

  function Case() {
    _ref27 = Case.__super__.constructor.apply(this, arguments);
    return _ref27;
  }

  return Case;

})(Ellipsis);

Actor = (function(_super) {
  __extends(Actor, _super);

  function Actor() {
    var _this = this;
    Actor.__super__.constructor.apply(this, arguments);
    this.anchors.E = function() {
      return {
        x: _this.x + (_this.width() - Actor.__super__.txt_width.apply(_this)) / 2,
        y: _this.y
      };
    };
    this.anchors.W = function() {
      return {
        x: _this.x - (_this.width() - Actor.__super__.txt_width.apply(_this)) / 2,
        y: _this.y
      };
    };
  }

  Actor.prototype.txt_y = function() {
    return this.height() / 2 - Actor.__super__.txt_height.apply(this) + 2 + this.margin.y;
  };

  Actor.prototype.txt_height = function() {
    return Actor.__super__.txt_height.call(this) + 50;
  };

  Actor.prototype.txt_width = function() {
    return Actor.__super__.txt_width.call(this) + 25;
  };

  Actor.prototype.path = function() {
    var bottom, hstick, wstick;
    wstick = (this.width() - Actor.__super__.txt_width.apply(this)) / 2;
    hstick = (this.height() - Actor.__super__.txt_height.apply(this)) / 4;
    bottom = this.txt_y() - this.margin.y;
    return "M " + (-wstick) + " " + bottom + "         L 0 " + (bottom - hstick) + "         M " + wstick + " " + bottom + "         L 0 " + (bottom - hstick) + "         M 0 " + (bottom - hstick) + "         L 0 " + (bottom - 2 * hstick) + "         M " + (-wstick) + " " + (bottom - 1.75 * hstick) + "         L " + wstick + " " + (bottom - 2.25 * hstick) + "         M 0 " + (bottom - 2 * hstick) + "         L 0 " + (bottom - 3 * hstick) + "         A " + (.5 * wstick) + " " + (.5 * hstick) + " 0 1 1 0 " + (bottom - 4 * hstick) + "         A " + (.5 * wstick) + " " + (.5 * hstick) + " 0 1 1 0 " + (bottom - 3 * hstick) + "         ";
  };

  return Actor;

})(Element);

System = (function(_super) {
  __extends(System, _super);

  function System() {
    _ref28 = System.__super__.constructor.apply(this, arguments);
    return _ref28;
  }

  return System;

})(Group);

UseCase = (function(_super) {
  __extends(UseCase, _super);

  UseCase.prototype.label = 'UML Use Case Diagram';

  function UseCase() {
    UseCase.__super__.constructor.call(this);
    this.linkstyle = 'diagonal';
    this.types = {
      elements: [Actor, Case],
      groups: [System],
      links: uml_links
    };
  }

  return UseCase;

})(Diagram);

Diagram.diagrams['UseCase'] = UseCase;

Electric = (function(_super) {
  __extends(Electric, _super);

  function Electric() {
    _ref29 = Electric.__super__.constructor.apply(this, arguments);
    return _ref29;
  }

  Electric.prototype.base_height = function() {
    return 20;
  };

  Electric.prototype.base_width = function() {
    return 20;
  };

  Electric.prototype.txt_y = function() {
    return this.height() / 2 + this.margin.y;
  };

  Electric.prototype.txt_height = function() {
    return this.base_height();
  };

  Electric.prototype.txt_width = function() {
    return this.base_width();
  };

  Electric.prototype.direction = function(x, y) {
    var d;
    d = Electric.__super__.direction.call(this, x, y);
    if (this._rotation % 180 === 0) {
      if (d === 'N') {
        d = 'W';
      }
      if (d === 'S') {
        d = 'E';
      }
    }
    if (this._rotation % 180 === 90) {
      if (d === 'W') {
        d = 'N';
      }
      if (d === 'E') {
        d = 'S';
      }
    }
    return d;
  };

  return Electric;

})(Element);

Node = (function(_super) {
  __extends(Node, _super);

  function Node() {
    Node.__super__.constructor.apply(this, arguments);
    this.margin.x = 0;
    this.margin.y = 0;
    this.text = '';
  }

  Node.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M 0 " + (-h2) + "         A " + w2 + " " + h2 + " 0 0 1 0 " + h2 + "         A " + w2 + " " + h2 + " 0 0 1 0 " + (-h2) + "        ";
  };

  return Node;

})(Electric);

Resistor = (function(_super) {
  __extends(Resistor, _super);

  function Resistor() {
    _ref30 = Resistor.__super__.constructor.apply(this, arguments);
    return _ref30;
  }

  Resistor.prototype.base_width = function() {
    return Resistor.__super__.base_width.call(this) * 3;
  };

  Resistor.prototype.path = function() {
    var h2, path, w, w2, _i;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    path = "M " + (-w2) + " 0";
    for (w = _i = -3; _i <= 2; w = ++_i) {
      path = "" + path + " L " + (w2 * w / 3 + w2 / 6) + " " + (h2 * (w % 2 ? -1 : 1));
    }
    return "" + path + " L " + w2 + " 0";
  };

  return Resistor;

})(Electric);

Diode = (function(_super) {
  __extends(Diode, _super);

  function Diode() {
    _ref31 = Diode.__super__.constructor.apply(this, arguments);
    return _ref31;
  }

  Diode.prototype.base_width = function() {
    return Diode.__super__.base_width.call(this) / 4;
  };

  Diode.prototype.base_height = function() {
    return Diode.__super__.base_height.call(this) / 4;
  };

  Diode.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + w2 + " 0         L " + w2 + " " + (-h2) + "         L " + w2 + " " + h2 + "         L " + w2 + " 0         L " + (-w2) + " " + h2 + "        z";
  };

  return Diode;

})(Electric);

Wire = (function(_super) {
  __extends(Wire, _super);

  function Wire() {
    _ref32 = Wire.__super__.constructor.apply(this, arguments);
    return _ref32;
  }

  return Wire;

})(Link);

ElectricDiagram = (function(_super) {
  __extends(ElectricDiagram, _super);

  ElectricDiagram.prototype.label = 'Electric Diagram';

  function ElectricDiagram() {
    ElectricDiagram.__super__.constructor.call(this);
    this.types = {
      elements: [Diode, Resistor, Node],
      groups: [],
      links: [Wire]
    };
  }

  return ElectricDiagram;

})(Diagram);

Diagram.diagrams['ElectricDiagram'] = ElectricDiagram;

Class = (function(_super) {
  __extends(Class, _super);

  function Class() {
    _ref33 = Class.__super__.constructor.apply(this, arguments);
    return _ref33;
  }

  Class.prototype.shift = 10;

  Class.prototype.height = function() {
    return Class.__super__.height.call(this) + this.shift * 2;
  };

  Class.prototype.txt_y = function() {
    return Class.__super__.txt_y.call(this) - this.shift;
  };

  Class.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "" + (Class.__super__.path.call(this)) + "         M " + (-w2) + " " + (h2 - this.shift) + "         L " + w2 + " " + (h2 - this.shift) + "         M " + (-w2) + " " + (h2 - 2 * this.shift) + "         L " + w2 + " " + (h2 - 2 * this.shift) + "        ";
  };

  return Class;

})(Rect);

ClassDiagram = (function(_super) {
  __extends(ClassDiagram, _super);

  ClassDiagram.prototype.label = 'UML Class Diagram';

  function ClassDiagram() {
    ClassDiagram.__super__.constructor.call(this);
    this.linkstyle = 'diagonal';
    this.types = {
      elements: [Class].concat(uml_elements),
      groups: [System],
      links: uml_links
    };
  }

  return ClassDiagram;

})(Diagram);

Diagram.diagrams['ClassDiagram'] = ClassDiagram;

element_add = function(type) {
  var mouse_evt, new_elt, node, nth, set, x, y;
  x = diagram.mouse.x;
  y = diagram.mouse.y;
  if (new type() instanceof Group) {
    set = diagram.groups;
    diagram.last_types.group = type;
  } else {
    set = diagram.elements;
    diagram.last_types.element = type;
  }
  nth = set.filter(function(elt) {
    return elt instanceof type;
  }).length + 1;
  new_elt = new type(x, y, "" + type.name + " #" + nth, !diagram.freemode);
  set.push(new_elt);
  if (d3.event) {
    diagram.selection = [new_elt];
  }
  svg.sync();
  if (d3.event) {
    node = null;
    svg.svg.selectAll('g.element,g.group').each(function(elt) {
      if (elt === new_elt) {
        return node = this;
      }
    });
    mouse_evt = document.createEvent('MouseEvent');
    mouse_evt.initMouseEvent(d3.event.type, d3.event.canBubble, d3.event.cancelable, d3.event.view, d3.event.detail, d3.event.screenX, d3.event.screenY, d3.event.clientX, d3.event.clientY, d3.event.ctrlKey, d3.event.altKey, d3.event.shiftKey, d3.event.metaKey, d3.event.button, d3.event.relatedTarget);
    return node.dispatchEvent(mouse_evt);
  }
};

link_add = function(type) {
  var elt, _i, _len, _ref34;
  diagram.linking = [];
  _ref34 = diagram.selection;
  for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
    elt = _ref34[_i];
    diagram.linking.push(new type(elt, diagram.mouse));
  }
  diagram.last_types.link = type;
  svg.sync();
  return d3.event.preventDefault();
};

commands = {
  undo: {
    fun: function(e) {
      history.go(-1);
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Undo',
    glyph: 'chevron-left',
    hotkey: 'ctrl+z'
  },
  redo: {
    fun: function(e) {
      history.go(1);
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Redo',
    glyph: 'chevron-right',
    hotkey: 'ctrl+y'
  },
  save: {
    fun: function(e) {
      save();
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Save locally',
    glyph: 'save',
    hotkey: 'ctrl+s'
  },
  edit: {
    fun: function() {
      edit((function() {
        if (diagram.selection.length === 1) {
          return diagram.selection[0].text;
        } else {
          return '';
        }
      }), (function(txt) {
        var elt, _i, _len, _ref34, _results;
        _ref34 = diagram.selection;
        _results = [];
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          elt = _ref34[_i];
          _results.push(elt.text = txt);
        }
        return _results;
      }));
      return svg.sync();
    },
    label: 'Edit elements text',
    glyph: 'edit',
    hotkey: 'e'
  },
  remove: {
    fun: function() {
      var elt, lnk, _i, _j, _len, _len1, _ref34, _ref35;
      _ref34 = diagram.selection;
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        elt = _ref34[_i];
        if (__indexOf.call(diagram.groups, elt) >= 0) {
          diagram.groups.splice(diagram.groups.indexOf(elt), 1);
        } else if (__indexOf.call(diagram.elements, elt) >= 0) {
          diagram.elements.splice(diagram.elements.indexOf(elt), 1);
        } else if (__indexOf.call(diagram.links, elt) >= 0) {
          diagram.links.splice(diagram.links.indexOf(elt), 1);
        }
        _ref35 = diagram.links.slice();
        for (_j = 0, _len1 = _ref35.length; _j < _len1; _j++) {
          lnk = _ref35[_j];
          if (elt === lnk.source || elt === lnk.target) {
            diagram.links.splice(diagram.links.indexOf(lnk), 1);
          }
        }
      }
      diagram.selection = [];
      return svg.sync();
    },
    label: 'Remove elements',
    glyph: 'remove-sign',
    hotkey: 'del'
  },
  select_all: {
    fun: function(e) {
      diagram.selection = diagram.nodes().concat(diagram.links);
      svg.tick();
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Select all elements',
    glyph: 'fullscreen',
    hotkey: 'ctrl+a'
  },
  reorganize: {
    fun: function() {
      var elt, sel, _i, _len;
      sel = diagram.selection.length > 0 ? diagram.selection : diagram.elements;
      for (_i = 0, _len = sel.length; _i < _len; _i++) {
        elt = sel[_i];
        elt.fixed = false;
      }
      return svg.sync();
    },
    label: 'Reorganize',
    glyph: 'th',
    hotkey: 'r'
  },
  freemode: {
    fun: function() {
      var elt, _i, _len, _ref34;
      _ref34 = diagram.nodes();
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        elt = _ref34[_i];
        elt.fixed = diagram.freemode;
      }
      if (diagram.freemode) {
        svg.force.stop();
      } else {
        svg.sync();
      }
      return diagram.freemode = !diagram.freemode;
    },
    label: 'Toggle free mode',
    glyph: 'send',
    hotkey: 'tab'
  },
  linkstyle: {
    fun: function() {
      diagram.linkstyle = (function() {
        switch (diagram.linkstyle) {
          case 'curve':
            return 'diagonal';
          case 'diagonal':
            return 'rectangular';
          case 'rectangular':
            return 'curve';
        }
      })();
      return svg.tick();
    },
    label: 'Change link style',
    glyph: 'retweet',
    hotkey: 'space'
  },
  defaultscale: {
    fun: function() {
      svg.zoom.scale(1);
      svg.zoom.translate([0, 0]);
      return svg.zoom.event(d3.select('.background'));
    },
    label: 'Reset view',
    glyph: 'screenshot',
    hotkey: 'ctrl+backspace'
  },
  snaptogrid: {
    fun: function() {
      var elt, _i, _len, _ref34;
      _ref34 = diagram.nodes();
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        elt = _ref34[_i];
        elt.x = elt.px = diagram.snap * Math.floor(elt.x / diagram.snap);
        elt.y = elt.py = diagram.snap * Math.floor(elt.y / diagram.snap);
      }
      return svg.tick();
    },
    label: 'Snap to grid',
    glyph: 'magnet',
    hotkey: 'ctrl+space'
  },
  "switch": {
    fun: function() {
      var link, node, _i, _j, _len, _len1, _ref34, _ref35, _ref36, _ref37;
      _ref34 = diagram.selection;
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        node = _ref34[_i];
        if (node instanceof Link) {
          _ref35 = [node.target, node.source], node.source = _ref35[0], node.target = _ref35[1];
        }
        if (node instanceof Element) {
          _ref36 = diagram.links;
          for (_j = 0, _len1 = _ref36.length; _j < _len1; _j++) {
            link = _ref36[_j];
            _ref37 = [link.target, link.source], link.source = _ref37[0], link.target = _ref37[1];
          }
        }
      }
      return svg.tick();
    },
    label: 'Switch link direction',
    glyph: 'transfer',
    hotkey: 'w'
  }
};

$(function() {
  var button, command, name, _results;
  _results = [];
  for (name in commands) {
    command = commands[name];
    button = d3.select('.btns').append('button').attr('title', "" + command.label + " [" + command.hotkey + "]").attr('class', 'btn btn-default btn-sm').on('click', command.fun);
    if (command.glyph) {
      button.append('span').attr('class', "glyphicon glyphicon-" + command.glyph);
    }
    _results.push(Mousetrap.bind(command.hotkey, command.fun));
  }
  return _results;
});

init_commands = function() {
  var e, e1, e2, fun, g, hotkey, i, icon, key, l, margin, path, svgicon, taken_hotkeys, txt, _i, _j, _len, _len1, _ref34, _ref35, _results;
  taken_hotkeys = [];
  $('aside .icons .specific').each(function() {
    return Mousetrap.unbind($(this).attr('data-hotkey'));
  });
  $('aside .icons svg').remove();
  $('aside h3').attr('id', diagram.constructor.name).addClass('specific').text(diagram.label);
  _ref34 = diagram.types.elements.concat(diagram.types.groups);
  for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
    e = _ref34[_i];
    i = 1;
    key = e.name[0].toLowerCase();
    while (i < e.length && __indexOf.call(taken_hotkeys, key) >= 0) {
      key = e[i++].toLowerCase();
    }
    taken_hotkeys.push(key);
    fun = (function(elt) {
      return function() {
        return element_add(elt);
      };
    })(e);
    hotkey = "a " + key;
    icon = new e(0, 0, e.name);
    if (icon instanceof Group) {
      icon._height = 70;
      icon._width = 90;
    }
    svgicon = d3.select('aside .icons').append('svg').attr('class', 'icon specific draggable btn btn-default').attr('title', "" + e.name + " [" + hotkey + "]").attr('data-hotkey', hotkey).on('mousedown', fun);
    g = svgicon.append('g').attr('class', 'element');
    path = g.append('path').attr('class', 'shape');
    txt = g.append('text').text(e.name);
    icon.set_txt_bbox(txt.node().getBBox());
    path.attr('d', icon.path());
    txt.attr('x', icon.txt_x()).attr('y', icon.txt_y());
    margin = 3;
    svgicon.attr('viewBox', "                " + (-icon.width() / 2 - margin) + "                " + (-icon.height() / 2 - margin) + "                " + (icon.width() + 2 * margin) + "                " + (icon.height() + 2 * margin)).attr('width', icon.width()).attr('height', icon.height()).attr('preserveAspectRatio', 'xMidYMid meet');
    Mousetrap.bind(hotkey, fun);
  }
  taken_hotkeys = [];
  _ref35 = diagram.types.links;
  _results = [];
  for (_j = 0, _len1 = _ref35.length; _j < _len1; _j++) {
    l = _ref35[_j];
    i = 1;
    key = l.name[0].toLowerCase();
    while (i < l.length && __indexOf.call(taken_hotkeys, key) >= 0) {
      key = l[i++].toLowerCase();
    }
    taken_hotkeys.push(key);
    fun = (function(lnk) {
      return function() {
        return link_add(lnk);
      };
    })(l);
    hotkey = "l " + key;
    icon = new l(e1 = new Element(0, 0), e2 = new Element(100, 0));
    e1.set_txt_bbox({
      width: 10,
      height: 10
    });
    e2.set_txt_bbox({
      width: 10,
      height: 10
    });
    svgicon = d3.select('aside .icons').append('svg').attr('class', 'icon specific draggable btn btn-default').attr('title', "" + l.name + " [" + hotkey + "]").attr('data-hotkey', hotkey).on('mousedown', fun);
    g = svgicon.append('g').attr('class', 'link');
    path = g.append('path').attr("class", "shape " + icon.constructor.type).attr("marker-end", "url(#" + icon.constructor.marker.id + ")").attr('d', icon.path());
    svgicon.attr('height', 20).attr('viewBox', "0 -10 100 20").attr('preserveAspectRatio', 'none');
    _results.push(Mousetrap.bind(hotkey, fun));
  }
  return _results;
};

edit = function(getter, setter) {
  var overlay, textarea, textarea_node;
  overlay = d3.select('#overlay').classed('visible', true);
  textarea = overlay.select('textarea');
  textarea_node = textarea.node();
  textarea.on('input', function() {
    setter(this.value);
    return svg.sync();
  }).on('keydown', function() {
    if (d3.event.keyCode === 27) {
      textarea.on('input', null);
      textarea.on('keydown', null);
      textarea_node.value = '';
      return overlay.classed('visible', false);
    }
  });
  textarea_node.value = getter();
  textarea_node.select();
  textarea_node.focus();
  return overlay.on('click', function() {
    if (d3.event.target === this) {
      textarea.on('input', null);
      textarea.on('keydown', null);
      textarea_node.value = '';
      return overlay.classed('visible', false);
    }
  });
};

mouse_xy = function(e) {
  var m;
  m = d3.mouse(e);
  return {
    x: (m[0] - diagram.zoom.translate[0]) / diagram.zoom.scale,
    y: (m[1] - diagram.zoom.translate[1]) / diagram.zoom.scale
  };
};

Svg = (function() {
  function Svg() {
    this.create = __bind(this.create, this);
    var markers,
      _this = this;
    this.aside = d3.select('aside');
    this.article = d3.select("article");
    this.width = this.article.node().clientWidth;
    this.height = this.article.node().clientHeight || 500;
    this.title = d3.select('#editor h2').on('dblclick', function() {
      return edit((function() {
        return diagram.title;
      }), (function(txt) {
        return diagram.title = txt;
      }));
    });
    this.zoom = d3.behavior.zoom().scale(diagram.zoom.scale).translate(diagram.zoom.translate).scaleExtent([.15, 5]).on("zoom", function() {
      var _ref34;
      if (!d3.event.sourceEvent || ((_ref34 = d3.event.sourceEvent.type) === 'wheel' || _ref34 === 'click') || d3.event.sourceEvent.ctrlKey || d3.event.sourceEvent.which === 2) {
        diagram.zoom.translate = d3.event.translate;
        diagram.zoom.scale = d3.event.scale;
        d3.select('.root').attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        return d3.select('#grid').attr("patternTransform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
      } else {
        _this.zoom.scale(diagram.zoom.scale);
        return _this.zoom.translate(diagram.zoom.translate);
      }
    });
    this.article.selectAll('svg').data([diagram]).enter().append("svg").attr('id', "diagram").attr("width", this.width).attr("height", this.height).call(this.create);
    this.svg = d3.select('#diagram');
    markers = this.svg.select('defs').selectAll('marker').data(diagram.markers());
    markers.enter().append('marker').attr('id', function(m) {
      return m.id;
    }).attr('viewBox', '-10 -10 30 30').attr('refX', 20).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 40).attr('markerHeight', 40).attr('orient', 'auto').append('path').attr('d', function(m) {
      return m.path();
    });
    markers.exit().remove();
    this.force = d3.layout.force().gravity(.2).linkDistance(100).charge(-5000).size([this.width, this.height]);
    this.svg.on("mousedown", function(event) {
      var elt, mouse, type, _i, _len, _ref34;
      if (diagram.dragging || d3.event.ctrlKey || d3.event.which === 2) {
        return;
      }
      if (d3.event.altKey && d3.event.shiftKey) {
        diagram.groupping = true;
      }
      if (d3.event.which === 3) {
        diagram.linking = [];
        _ref34 = diagram.selection;
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          elt = _ref34[_i];
          type = diagram.last_types.link || diagram.types.links[0];
          if (!type) {
            continue;
          }
          diagram.linking.push(new type(elt, diagram.mouse));
        }
        _this.sync();
      } else {
        if (!d3.event.shiftKey) {
          diagram.selection = [];
          svg.tick();
        }
        mouse = mouse_xy(_this.svg.node());
        _this.svg.select(diagram.groupping ? 'g.underlay' : 'g.overlay').append("rect").attr({
          "class": "selection",
          x: mouse.x,
          y: mouse.y,
          width: 0,
          height: 0
        });
      }
      return d3.event.preventDefault();
    }).on('contextmenu', function() {
      if (!d3.event.shiftKey) {
        return d3.event.preventDefault();
      }
    });
    d3.select(window).on("mousemove", function() {
      var mouse, move, rect, sel;
      if (d3.event.ctrlKey) {
        return;
      }
      mouse = mouse_xy(_this.svg.node());
      diagram.mouse.x = mouse.x;
      diagram.mouse.y = mouse.y;
      if (diagram.linking.length) {
        _this.tick();
        return;
      }
      sel = _this.svg.select("rect.selection");
      if (!sel.empty()) {
        rect = {
          x: +sel.attr("x"),
          y: +sel.attr("y"),
          width: +sel.attr("width"),
          height: +sel.attr("height")
        };
        move = {
          x: mouse.x - rect.x,
          y: mouse.y - rect.y
        };
        if (move.x < 1 || (move.x * 2 < rect.width)) {
          rect.x = mouse.x;
          rect.width -= move.x;
        } else {
          rect.width = move.x;
        }
        if (move.y < 1 || (move.y * 2 < rect.height)) {
          rect.y = mouse.y;
          rect.height -= move.y;
        } else {
          rect.height = move.y;
        }
        rect.width = Math.max(0, rect.width);
        rect.height = Math.max(0, rect.height);
        sel.attr(rect);
        _this.svg.selectAll('g.element,g.group').each(function(elt) {
          var g, selected;
          g = d3.select(this);
          selected = __indexOf.call(diagram.selection, elt) >= 0;
          if (elt["in"](rect) && !selected) {
            return diagram.selection.push(elt);
          } else if (!elt["in"](rect) && selected && !d3.event.shiftKey) {
            return diagram.selection.splice(diagram.selection.indexOf(elt), 1);
          }
        });
        svg.tick();
        return d3.event.preventDefault();
      }
    }).on("mouseup", function() {
      var grp, height, nth, sel, type, width, x, y;
      if (d3.event.ctrlKey) {
        return;
      }
      if (diagram.linking.length) {
        diagram.linking = [];
        _this.sync();
      }
      if (diagram.groupping) {
        sel = _this.svg.select("rect.selection");
        x = +sel.attr("x");
        y = +sel.attr("y");
        width = +sel.attr("width");
        height = +sel.attr("height");
        type = diagram.last_types.group || diagram.types.groups[0];
        if (type) {
          nth = diagram.groups.filter(function(grp) {
            return grp instanceof type;
          }).length + 1;
          grp = new type(x + width / 2, y + height / 2, "" + type.name + " #" + nth, !diagram.freemode);
          grp._width = width;
          grp._height = height;
          diagram.groups.push(grp);
        }
        diagram.groupping = false;
        _this.sync();
      }
      _this.svg.selectAll("rect.selection").remove();
      return d3.event.preventDefault();
    }).on("keydown", function() {
      if (d3.event.ctrlKey) {
        return d3.select('.background').classed('move', true);
      }
    }).on("keyup", function() {
      return d3.select('.background').classed('move', false);
    });
    this.force.on('tick', function() {
      return _this.tick();
    }).on('end', function() {
      var elt, _i, _len, _ref34;
      if (!diagram.freemode) {
        _ref34 = diagram.nodes();
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          elt = _ref34[_i];
          elt.fixed = true;
        }
      }
      _this.tick();
      return generate_url();
    });
  }

  Svg.prototype.create = function(svg) {
    var background, background_g, defs, pattern, root,
      _this = this;
    defs = svg.append('defs');
    background_g = svg.append('g').attr('id', 'bg');
    background = background_g.append('rect').attr('class', 'background').attr('width', this.width).attr('height', this.height).attr('fill', 'url(#grid)').call(this.zoom);
    d3.select(window).on('resize', function() {
      return _this.resize();
    });
    pattern = defs.append('pattern').attr('id', 'grid').attr('viewBox', '0 0 10 10').attr('x', 0).attr('y', 0).attr('width', diagram.snap).attr('height', diagram.snap).attr('patternUnits', 'userSpaceOnUse');
    pattern.append('path').attr('d', 'M 10 0 L 0 0 L 0 10');
    root = background_g.append('g').attr('class', 'root');
    root.append('g').attr('class', 'underlay');
    root.append('g').attr('class', 'groups');
    root.append('g').attr('class', 'links');
    root.append('g').attr('class', 'elements');
    return root.append('g').attr('class', 'overlay');
  };

  Svg.prototype.sync = function() {
    var element, element_g, force_drag, group, group_g, link, link_g, resize_drag,
      _this = this;
    this.zoom.scale(diagram.zoom.scale);
    this.zoom.translate(diagram.zoom.translate);
    this.zoom.event(d3.select('#bg'));
    this.title.text(diagram.title);
    force_drag = this.force.drag().on("drag.force", function(elt) {
      var delta, _i, _len, _ref34, _ref35;
      if (!diagram.dragging || d3.event.sourceEvent.ctrlKey) {
        return;
      }
      if (_ref34 = !elt, __indexOf.call(diagram.selection, _ref34) >= 0) {
        diagram.selection.push(elt);
      }
      if (d3.event.sourceEvent.shiftKey) {
        delta = {
          x: elt.px - d3.event.x,
          y: elt.py - d3.event.y
        };
      } else {
        delta = {
          x: elt.px - diagram.snap * Math.floor(d3.event.x / diagram.snap),
          y: elt.py - diagram.snap * Math.floor(d3.event.y / diagram.snap)
        };
      }
      _ref35 = diagram.selection;
      for (_i = 0, _len = _ref35.length; _i < _len; _i++) {
        elt = _ref35[_i];
        elt.px -= delta.x;
        elt.py -= delta.y;
      }
      return svg.force.resume();
    }).on('dragstart', function() {
      if (d3.event.sourceEvent.which === 3 || d3.event.sourceEvent.ctrlKey) {
        return;
      }
      return diagram.dragging = true;
    }).on('dragend', function(elt) {
      var lnk, _i, _len, _ref34;
      if (!diagram.dragging) {
        return;
      }
      diagram.dragging = false;
      if (!$(d3.event.sourceEvent.target).closest('.inside').size()) {
        if (__indexOf.call(diagram.elements, elt) >= 0) {
          diagram.elements.splice(diagram.elements.indexOf(elt), 1);
        }
        if (__indexOf.call(diagram.groups, elt) >= 0) {
          diagram.groups.splice(diagram.groups.indexOf(elt), 1);
        }
        if (__indexOf.call(diagram.selection, elt) >= 0) {
          diagram.selection.splice(diagram.selection.indexOf(elt), 1);
        }
        _ref34 = diagram.links.slice();
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          lnk = _ref34[_i];
          if (elt === lnk.source || elt === lnk.target) {
            diagram.links.splice(diagram.links.indexOf(lnk), 1);
          }
        }
        svg.sync();
      }
      if (!diagram.freemode) {
        return elt.fixed = true;
      }
    });
    this.force.nodes(diagram.nodes()).links(diagram.links);
    group = this.svg.select('g.groups').selectAll('g.group').data(diagram.groups);
    group_g = group.enter().append('g').attr("class", "group").call(force_drag).on("mousedown", function(grp) {
      var selected;
      if (d3.event.ctrlKey) {
        return;
      }
      selected = __indexOf.call(diagram.selection, grp) >= 0;
      if ((selected && !diagram.dragging) || (!selected) && !d3.event.shiftKey) {
        diagram.selection = [grp];
      }
      if (d3.event.shiftKey && !selected) {
        diagram.selection.push(grp);
      }
      if (d3.event.which !== 3) {
        svg.svg.selectAll('g.element').each(function(elt) {
          if (__indexOf.call(diagram.selection, elt) < 0 && grp.contains(elt)) {
            return diagram.selection.push(elt);
          }
        });
      }
      return svg.tick();
    }).on("mousemove", function(grp) {
      var lnk, _i, _len, _ref34, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref34 = diagram.linking;
      _results = [];
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        lnk = _ref34[_i];
        _results.push(lnk.target = grp);
      }
      return _results;
    }).on("mouseout", function(grp) {
      var lnk, _i, _len, _ref34, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref34 = diagram.linking;
      _results = [];
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        lnk = _ref34[_i];
        _results.push(lnk.target = diagram.mouse);
      }
      return _results;
    }).on("mouseup", function(grp) {
      var lnk, _i, _len, _ref34;
      if (d3.event.ctrlKey) {
        return;
      }
      if (diagram.linking.length) {
        _ref34 = diagram.linking;
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          lnk = _ref34[_i];
          if (lnk.source !== grp) {
            diagram.links.push(new lnk.constructor(lnk.source, grp));
          }
        }
        diagram.linking = [];
        _this.sync();
        return d3.event.preventDefault();
      }
    }).on('dblclick', function(grp) {
      if (d3.event.ctrlKey) {
        return;
      }
      return edit((function() {
        return grp.text;
      }), (function(txt) {
        return grp.text = txt;
      }));
    });
    resize_drag = d3.behavior.drag().on("dragstart", function(node) {
      if (d3.event.sourceEvent.which === 3) {
        return;
      }
      return d3.event.sourceEvent.stopPropagation();
    }).on("drag", function(node) {
      var direction, mouse, rotations;
      group = d3.select(this.parentNode);
      if (d3.event.sourceEvent.which === 2 && node instanceof Electric) {
        rotations = {
          E: 0,
          S: 90,
          W: 180,
          N: 270
        };
        mouse = mouse_xy(d3.select('#diagram').node());
        direction = Electric.__super__.direction.apply(node, [mouse.x, mouse.y]);
        node._rotation = rotations[direction];
      } else {
        node.width(node.width() + d3.event.dx * 2);
        node.height(node.height() + d3.event.dy * 2);
        group.selectAll('path').attr('d', node.path());
        group.select('text').attr('x', node.txt_x()).attr('y', node.txt_y()).selectAll('tspan').attr('x', node.txt_x());
      }
      return svg.tick();
    }).on("dragend", function(node) {
      return generate_url();
    });
    group_g.append('path').attr('class', 'ghost').call(resize_drag);
    group_g.append('path').attr('class', 'shape');
    group_g.append('text');
    group.select('text').each(function(elt) {
      var i, line, tspan, txt, _i, _len, _ref34, _results;
      txt = d3.select(this);
      if (elt.text === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref34 = elt.text.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref34.length; _i < _len; i = ++_i) {
        line = _ref34[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }).each(function(elt) {
      return elt.set_txt_bbox(this.getBBox());
    }).attr('x', function(elt) {
      return elt.txt_x();
    }).attr('y', function(elt) {
      return elt.txt_y();
    }).selectAll('tspan').attr('x', function(elt) {
      return elt.txt_x();
    });
    group.each(function(grp) {
      return $(this).find('path').attr('d', grp.path());
    });
    link = this.svg.select('g.links').selectAll('g.link').data(diagram.links.concat(diagram.linking));
    link_g = link.enter().append('g').attr("class", "link");
    link_g.append("path").attr('class', 'ghost');
    link_g.append("path").attr('class', function(lnk) {
      return "shape " + lnk.constructor.type;
    }).attr("marker-end", function(lnk) {
      return "url(#" + lnk.constructor.marker.id + ")";
    });
    link_g.append("text").attr('class', "start");
    link_g.append("text").attr('class', "end");
    link_g.on('mousedown', function(lnk) {
      if (!d3.event.shiftKey) {
        diagram.selection = [];
      }
      diagram.selection.push(lnk);
      svg.tick();
      return d3.event.stopPropagation();
    }).on('dblclick', function(lnk) {
      var nearest;
      if (d3.event.ctrlKey) {
        return;
      }
      nearest = lnk.nearest(diagram.mouse);
      if (nearest === lnk.source) {
        return edit((function() {
          return lnk.text.source;
        }), (function(txt) {
          return lnk.text.source = txt;
        }));
      } else {
        return edit((function() {
          return lnk.text.target;
        }), (function(txt) {
          return lnk.text.target = txt;
        }));
      }
    });
    element = this.svg.select('g.elements').selectAll('g.element').data(diagram.elements);
    element_g = element.enter().append('g').attr('class', 'element').call(force_drag).on("mousedown", function(elt) {
      var selected;
      if (d3.event.ctrlKey) {
        return;
      }
      selected = __indexOf.call(diagram.selection, elt) >= 0;
      if ((selected && !diagram.dragging) || (!selected) && !d3.event.shiftKey) {
        diagram.selection = [elt];
      }
      if (d3.event.shiftKey && !selected) {
        diagram.selection.push(elt);
      }
      return svg.tick();
    }).on("mousemove", function(elt) {
      var lnk, _i, _len, _ref34, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref34 = diagram.linking;
      _results = [];
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        lnk = _ref34[_i];
        _results.push(lnk.target = elt);
      }
      return _results;
    }).on("mouseout", function(elt) {
      var lnk, _i, _len, _ref34, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref34 = diagram.linking;
      _results = [];
      for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
        lnk = _ref34[_i];
        _results.push(lnk.target = diagram.mouse);
      }
      return _results;
    }).on("mouseup", function(elt) {
      var lnk, _i, _len, _ref34;
      if (d3.event.ctrlKey) {
        return;
      }
      if (diagram.linking.length) {
        _ref34 = diagram.linking;
        for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
          lnk = _ref34[_i];
          if (lnk.source !== elt) {
            diagram.links.push(new lnk.constructor(lnk.source, elt));
          }
        }
        diagram.linking = [];
        _this.sync();
        return d3.event.preventDefault();
      }
    }).on('dblclick', function(elt) {
      if (d3.event.ctrlKey) {
        return;
      }
      return edit((function() {
        return elt.text;
      }), (function(txt) {
        return elt.text = txt;
      }));
    });
    element_g.append('path').attr('class', 'ghost').call(resize_drag);
    element_g.append('path').attr('class', 'shape');
    element_g.append('text');
    element.select('text').each(function(elt) {
      var i, line, tspan, txt, _i, _len, _ref34, _results;
      txt = d3.select(this);
      if (elt.text === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref34 = elt.text.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref34.length; _i < _len; i = ++_i) {
        line = _ref34[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }).each(function(elt) {
      return elt.set_txt_bbox(this.getBBox());
    }).attr('x', function(elt) {
      return elt.txt_x();
    }).attr('y', function(elt) {
      return elt.txt_y();
    }).selectAll('tspan').attr('x', function(elt) {
      return elt.txt_x();
    });
    link.each(function(lnk) {
      return $(this).find('path').attr('d', lnk.path());
    });
    link.select('text.start').each(function(lnk) {
      var i, line, tspan, txt, _i, _len, _ref34, _results;
      txt = d3.select(this);
      if (lnk.text.source === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref34 = lnk.text.source.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref34.length; _i < _len; i = ++_i) {
        line = _ref34[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    link.select('text.end').each(function(lnk) {
      var i, line, tspan, txt, _i, _len, _ref34, _results;
      txt = d3.select(this);
      if (!lnk.text.target === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref34 = lnk.text.target.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref34.length; _i < _len; i = ++_i) {
        line = _ref34[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    element.each(function(elt) {
      return $(this).find('path').attr('d', elt.path());
    });
    group.exit().remove();
    element.exit().remove();
    link.exit().remove();
    this.tick();
    return this.force.start();
  };

  Svg.prototype.tick = function() {
    var elt, link, need_force, _i, _len, _ref34;
    need_force = false;
    _ref34 = diagram.nodes();
    for (_i = 0, _len = _ref34.length; _i < _len; _i++) {
      elt = _ref34[_i];
      if (!elt.fixed) {
        need_force = true;
        break;
      }
    }
    need_force = need_force && (diagram.freemode || (this.force.alpha() || 1) > .03);
    if (!need_force && !diagram.dragging) {
      this.force.stop();
    }
    this.svg.select('g.groups').selectAll('g.group').attr("transform", (function(grp) {
      return "translate(" + grp.x + "," + grp.y + ")rotate(" + grp._rotation + ")";
    })).classed('moving', function(grp) {
      return !grp.fixed;
    }).classed('selected', function(grp) {
      return __indexOf.call(diagram.selection, grp) >= 0;
    });
    this.svg.select('g.elements').selectAll('g.element').attr("transform", (function(elt) {
      return "translate(" + elt.x + "," + elt.y + ")rotate(" + elt._rotation + ")";
    })).classed('moving', function(elt) {
      return !elt.fixed;
    }).classed('selected', function(elt) {
      return __indexOf.call(diagram.selection, elt) >= 0;
    });
    link = this.svg.select('g.links').selectAll('g.link').classed('selected', function(lnk) {
      return __indexOf.call(diagram.selection, lnk) >= 0;
    });
    link.each(function(lnk) {
      return $(this).find('path').attr('d', lnk.path());
    });
    link.select('text.start').attr('transform', function(lnk) {
      return "translate(" + lnk.a1.x + ", " + lnk.a1.y + ")";
    }).attr('dx', function(lnk) {
      var _ref35;
      if ((_ref35 = lnk.d1) === 'N' || _ref35 === 'E') {
        return lnk.text_margin + this.getBBox().width / 2;
      } else {
        return -(lnk.text_margin + this.getBBox().width / 2);
      }
    }).attr('dy', function(lnk) {
      var _ref35;
      if ((_ref35 = lnk.d1) === 'N' || _ref35 === 'E') {
        return -(this.getBBox().height + lnk.text_margin);
      } else {
        return lnk.text_margin;
      }
    });
    return link.select('text.end').attr('transform', function(lnk) {
      return "translate(" + lnk.a2.x + ", " + lnk.a2.y + ")";
    }).attr('dx', function(lnk) {
      var _ref35;
      if ((_ref35 = lnk.d2) === 'N' || _ref35 === 'E') {
        return lnk.text_margin + this.getBBox().width / 2;
      } else {
        return -(lnk.text_margin + this.getBBox().width / 2);
      }
    }).attr('dy', function(lnk) {
      var _ref35;
      if ((_ref35 = lnk.d2) === 'N' || _ref35 === 'E') {
        return -(this.getBBox().height + lnk.text_margin);
      } else {
        return lnk.text_margin;
      }
    });
  };

  Svg.prototype.resize = function() {
    this.width = this.article.node().clientWidth;
    this.height = this.article.node().clientHeight || 500;
    this.svg.attr("width", this.width).attr("height", this.height);
    return d3.select('.background').attr("width", this.width).attr("height", this.height);
  };

  return Svg;

})();

load = function(data) {
  var Type, e;
  Type = Diagram.diagrams[data.name];
  window.diagram = new Type();
  try {
    diagram.loads(data);
  } catch (_error) {
    e = _error;
    console.log(e);
  }
  return window.svg = new Svg();
};

save = function() {
  return localStorage.setItem("" + diagram.constructor.name + "|" + diagram.title, diagram.hash());
};

generate_url = function() {
  var hash;
  hash = '#' + diagram.hash();
  if (location.hash !== hash) {
    return history.pushState(null, null, hash);
  }
};

history_pop = function() {
  var $diagrams, $editor;
  $diagrams = $('#diagrams');
  $editor = $('#editor');
  if (!location.hash) {
    $diagrams.removeClass('hidden');
    $editor.addClass('hidden');
    list_diagrams();
    return;
  }
  $editor.removeClass('hidden');
  $diagrams.addClass('hidden');
  load(JSON.parse(atob(location.hash.slice(1))));
  if (diagram.constructor.name !== $('aside h3').attr('id')) {
    init_commands();
    svg.resize();
  }
  return svg.sync();
};

list_diagrams = function() {
  var $tbody, $tr, $ul, b64_diagram, diagram, key, name, title, type, _ref34, _ref35, _results;
  $tbody = $('#diagrams tbody');
  $tbody.find('.local').remove();
  for (key in localStorage) {
    b64_diagram = localStorage[key];
    _ref34 = key.split('|'), type = _ref34[0], title = _ref34[1];
    if (title == null) {
      continue;
    }
    $tbody.append($tr = $('<tr>'));
    $tr.addClass('local').append($('<td>').text(title), $('<td>').text(Diagram.diagrams[type].label), $('<td>').append($('<a>').attr('href', "#" + b64_diagram).text('⬈')));
  }
  $ul = $('#diagrams ul');
  $ul.children().remove();
  _ref35 = Diagram.diagrams;
  _results = [];
  for (name in _ref35) {
    type = _ref35[name];
    diagram = new type();
    b64_diagram = diagram.hash();
    _results.push($ul.append($('<li>').append($('<a>').attr('href', "#" + b64_diagram).text("New " + diagram.label))));
  }
  return _results;
};

$(function() {
  list_diagrams();
  _this.addEventListener("popstate", history_pop);
  if (location.hash && (_this.mozInnerScreenX != null)) {
    return history_pop();
  }
});
