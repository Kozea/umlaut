// Generated by CoffeeScript 1.6.3
var Actor, Arrow, Association, Case, DataIO, Decision, Delay, Diagram, Element, FlowChart, Link, Mouse, Process, State, Svg, Terminator, UseCase, commands, dist, edit, element_add, generate_url, history_pop, init_commands, list_diagrams, load, mouse_xy, save, state, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  _this = this,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dist = function(o, t) {
  return Math.sqrt(Math.pow(t.x - o.x, 2) + Math.pow(t.y - o.y, 2));
};

Element = (function() {
  function Element(x, y, text, fixed) {
    this.x = x;
    this.y = y;
    this.text = text;
    this.fixed = fixed != null ? fixed : true;
    this.margin = {
      x: 10,
      y: 5
    };
  }

  Element.prototype.pos = function() {
    return {
      x: this.x,
      y: this.y
    };
  };

  Element.prototype.width = function() {
    return this._txt_bbox.width + 2 * this.margin.x;
  };

  Element.prototype.height = function() {
    return this._txt_bbox.height + 2 * this.margin.y;
  };

  Element.prototype.direction = function(x, y) {
    var delta;
    delta = this.height() / this.width();
    if (this.x <= x && this.y <= y) {
      if (y > delta * (x - this.x) + this.y) {
        return 'S';
      } else {
        return 'E';
      }
    }
    if (this.x >= x && this.y <= y) {
      if (y > delta * (this.x - x) + this.y) {
        return 'S';
      } else {
        return 'O';
      }
    }
    if (this.x <= x && this.y >= y) {
      if (y > delta * (this.x - x) + this.y) {
        return 'E';
      } else {
        return 'N';
      }
    }
    if (this.x >= x && this.y >= y) {
      if (y > delta * (x - this.x) + this.y) {
        return 'O';
      } else {
        return 'N';
      }
    }
  };

  Element.prototype.anchor = function(direction) {
    switch (direction) {
      case 'N':
        return {
          x: this.x,
          y: this.y - this.height() / 2
        };
      case 'S':
        return {
          x: this.x,
          y: this.y + this.height() / 2
        };
      case 'E':
        return {
          x: this.x + this.width() / 2,
          y: this.y
        };
      case 'O':
        return {
          x: this.x - this.width() / 2,
          y: this.y
        };
    }
  };

  Element.prototype["in"] = function(rect) {
    var _ref, _ref1;
    return (rect.x < (_ref = this.x) && _ref < rect.x + rect.width) && (rect.y < (_ref1 = this.y) && _ref1 < rect.y + rect.height);
  };

  Element.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      x: this.x,
      y: this.y,
      text: this.text,
      fixed: this.fixed
    };
  };

  return Element;

})();

Mouse = (function(_super) {
  __extends(Mouse, _super);

  function Mouse() {
    _ref = Mouse.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Mouse.prototype.width = function() {
    return 1;
  };

  Mouse.prototype.height = function() {
    return 1;
  };

  Mouse.prototype.weight = 1;

  return Mouse;

})(Element);

Link = (function() {
  Link.prototype.text_margin = 10;

  function Link(source, target, text) {
    this.source = source;
    this.target = target;
    this.a1 = this.a2 = 0;
    this.text = {
      source: (text != null ? text.source : void 0) || '',
      target: (text != null ? text.target : void 0) || ''
    };
  }

  Link.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      source: diagram.elements.indexOf(this.source),
      target: diagram.elements.indexOf(this.target),
      text: this.text
    };
  };

  Link.prototype.nearest = function(pos) {
    if (dist(pos, this.source) < dist(pos, this.target)) {
      return this.source;
    } else {
      return this.target;
    }
  };

  Link.prototype.path = function() {
    var c1, c2, horz, m, mid, path, vert, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    c1 = this.source.pos();
    c2 = this.target.pos();
    if (void 0 === c1.x || void 0 === c1.y || void 0 === c2.x || void 0 === c2.y) {
      return 'M 0 0';
    }
    this.d1 = this.source.direction(c2.x, c2.y);
    this.d2 = this.target.direction(c1.x, c1.y);
    this.a1 = this.source.anchor(this.d1);
    this.a2 = this.target.anchor(this.d2);
    path = "M " + this.a1.x + " " + this.a1.y;
    vert = ['N', 'S'];
    horz = ['E', 'O'];
    if (diagram.linkstyle === 'curve') {
      path = "" + path + " C";
      m = {
        x: .5 * (this.a1.x + this.a2.x),
        y: .5 * (this.a1.y + this.a2.y)
      };
      if (_ref1 = this.d1, __indexOf.call(vert, _ref1) >= 0) {
        path = "" + path + " " + this.a1.x + " " + m.y;
      } else {
        path = "" + path + " " + m.x + " " + this.a1.y;
      }
      if (_ref2 = this.d2, __indexOf.call(vert, _ref2) >= 0) {
        path = "" + path + " " + this.a2.x + " " + m.y;
      } else {
        path = "" + path + " " + m.x + " " + this.a2.y;
      }
    } else if (diagram.linkstyle === 'diagonal') {
      path = "" + path + " L";
    } else if (diagram.linkstyle === 'rectangular') {
      path = "" + path + " L";
      if ((_ref3 = this.d1, __indexOf.call(vert, _ref3) >= 0) && (_ref4 = this.d2, __indexOf.call(horz, _ref4) >= 0)) {
        path = "" + path + " " + this.a1.x + " " + this.a2.y + " L";
      } else if ((_ref5 = this.d1, __indexOf.call(horz, _ref5) >= 0) && (_ref6 = this.d2, __indexOf.call(vert, _ref6) >= 0)) {
        path = "" + path + " " + this.a2.x + " " + this.a1.y + " L";
      } else if ((_ref7 = this.d1, __indexOf.call(horz, _ref7) >= 0) && (_ref8 = this.d2, __indexOf.call(horz, _ref8) >= 0)) {
        mid = this.a1.x + .5 * (this.a2.x - this.a1.x);
        path = "" + path + " " + mid + " " + this.a1.y + " L " + mid + " " + this.a2.y + " L";
      } else if ((_ref9 = this.d1, __indexOf.call(vert, _ref9) >= 0) && (_ref10 = this.d2, __indexOf.call(vert, _ref10) >= 0)) {
        mid = this.a1.y + .5 * (this.a2.y - this.a1.y);
        path = "" + path + " " + this.a1.x + " " + mid + " L " + this.a2.x + " " + mid + " L";
      }
    }
    return "" + path + " " + this.a2.x + " " + this.a2.y;
  };

  return Link;

})();

Diagram = (function() {
  Diagram.diagrams = {};

  function Diagram() {
    this.title = 'Untitled ' + this.constructor.label;
    this.linkstyle = 'rectangular';
    this.types = {};
    this.elements = [];
    this.links = [];
  }

  Diagram.prototype.element = function(name) {
    var elt, _i, _len, _ref1;
    _ref1 = this.types.elements;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      elt = _ref1[_i];
      if (elt.name === name) {
        return elt;
      }
    }
  };

  Diagram.prototype.link = function(name) {
    var lnk, _i, _len, _ref1;
    _ref1 = this.types.links;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      lnk = _ref1[_i];
      if (lnk.name === name) {
        return lnk;
      }
    }
  };

  Diagram.prototype.objectify = function() {
    return {
      name: this.constructor.name,
      linkstyle: this.linkstyle,
      title: this.title,
      elements: this.elements.map(function(elt) {
        return elt.objectify();
      }),
      links: this.links.map(function(lnk) {
        return lnk.objectify();
      })
    };
  };

  Diagram.prototype.hash = function() {
    return btoa(JSON.stringify(this.objectify()));
  };

  return Diagram;

})();

Process = (function(_super) {
  __extends(Process, _super);

  function Process() {
    _ref1 = Process.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Process.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " " + (-h2) + "         L " + w2 + " " + (-h2) + "         L " + w2 + " " + h2 + "         L " + (-w2) + " " + h2 + "         z";
  };

  return Process;

})(Element);

DataIO = (function(_super) {
  __extends(DataIO, _super);

  function DataIO() {
    _ref2 = DataIO.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  DataIO.prototype.path = function() {
    var h2, shift, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    shift = 5;
    return "M " + (-w2 - shift) + " " + (-h2) + "         L " + (w2 - shift) + " " + (-h2) + "         L " + (w2 + shift) + " " + h2 + "         L " + (-w2 + shift) + " " + h2 + "         z";
  };

  return DataIO;

})(Element);

Terminator = (function(_super) {
  __extends(Terminator, _super);

  function Terminator() {
    _ref3 = Terminator.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  Terminator.prototype.path = function() {
    var h2, shift, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    shift = 10;
    return "M " + (-w2 + shift) + " " + (-h2) + "         L " + (w2 - shift) + " " + (-h2) + "         Q " + w2 + " " + (-h2) + " " + w2 + " " + (-h2 + shift) + "         L " + w2 + " " + (h2 - shift) + "         Q " + w2 + " " + h2 + " " + (w2 - shift) + " " + h2 + "         L " + (-w2 + shift) + " " + h2 + "         Q " + (-w2) + " " + h2 + " " + (-w2) + " " + (h2 - shift) + "         L " + (-w2) + " " + (-h2 + shift) + "         Q " + (-w2) + " " + (-h2) + " " + (-w2 + shift) + " " + (-h2);
  };

  return Terminator;

})(Element);

Decision = (function(_super) {
  __extends(Decision, _super);

  function Decision() {
    Decision.__super__.constructor.apply(this, arguments);
    this.margin.y = 0;
  }

  Decision.prototype.width = function() {
    var ow;
    ow = Decision.__super__.width.call(this);
    return ow + Math.sqrt(ow * this._txt_bbox.height + 2 * this.margin.y);
  };

  Decision.prototype.height = function() {
    var oh;
    oh = Decision.__super__.height.call(this);
    return oh + Math.sqrt(oh * this._txt_bbox.width + 2 * this.margin.x);
  };

  Decision.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " 0         L 0 " + (-h2) + "         L " + w2 + " 0         L 0 " + h2 + "         z";
  };

  return Decision;

})(Element);

Delay = (function(_super) {
  __extends(Delay, _super);

  function Delay() {
    _ref4 = Delay.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  Delay.prototype.path = function() {
    var h2, shift, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    shift = 10;
    return "M " + (-w2) + " " + (-h2) + "         L " + (w2 - shift) + " " + (-h2) + "         Q " + w2 + " " + (-h2) + " " + w2 + " " + (-h2 + shift) + "         L " + w2 + " " + (h2 - shift) + "         Q " + w2 + " " + h2 + " " + (w2 - shift) + " " + h2 + "         L " + (-w2) + " " + h2 + "         z";
  };

  return Delay;

})(Element);

Arrow = (function(_super) {
  __extends(Arrow, _super);

  function Arrow() {
    _ref5 = Arrow.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  return Arrow;

})(Link);

FlowChart = (function(_super) {
  __extends(FlowChart, _super);

  FlowChart.label = 'Flow Chart';

  function FlowChart() {
    FlowChart.__super__.constructor.apply(this, arguments);
    this.types = {
      elements: [Process, DataIO, Terminator, Decision, Delay],
      links: [Arrow]
    };
  }

  return FlowChart;

})(Diagram);

Diagram.diagrams['FlowChart'] = FlowChart;

Case = (function(_super) {
  __extends(Case, _super);

  function Case() {
    _ref6 = Case.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  Case.prototype.width = function() {
    var ow;
    ow = Case.__super__.width.call(this);
    return 2 * ow / Math.sqrt(2);
  };

  Case.prototype.height = function() {
    var oh;
    oh = Case.__super__.height.call(this);
    return 2 * oh / Math.sqrt(2);
  };

  Case.prototype.path = function() {
    var h2, w2;
    w2 = this.width() / 2;
    h2 = this.height() / 2;
    return "M " + (-w2) + " 0         A " + w2 + " " + h2 + " 0 1 1 " + w2 + " 0         A " + w2 + " " + h2 + " 0 1 1 " + (-w2) + " 0        ";
  };

  return Case;

})(Element);

Actor = (function(_super) {
  __extends(Actor, _super);

  function Actor() {
    _ref7 = Actor.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  Actor.prototype.path = function() {
    var h2, stick;
    h2 = this.height() / 2;
    stick = 10;
    return "M " + (-stick) + " " + (-h2) + "         L 0 " + (-h2 - stick) + "         L " + stick + " " + (-h2) + "         M 0 " + (-h2 - stick) + "         L 0 " + (-h2 - 2 * stick) + "         M " + (-stick) + " " + (-h2 - 2 * stick) + "         L " + stick + " " + (-h2 - 2 * stick) + "         M 0 " + (-h2 - 2 * stick) + "         L 0 " + (-h2 - 3 * stick) + "         A " + (.5 * stick) + " " + (.5 * stick) + " 0 1 1 0 " + (-h2 - 4 * stick) + "         A " + (.5 * stick) + " " + (.5 * stick) + " 0 1 1 0 " + (-h2 - 3 * stick) + "         ";
  };

  return Actor;

})(Element);

Association = (function(_super) {
  __extends(Association, _super);

  function Association() {
    _ref8 = Association.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  return Association;

})(Link);

UseCase = (function(_super) {
  __extends(UseCase, _super);

  UseCase.label = 'UML Use case';

  function UseCase() {
    UseCase.__super__.constructor.apply(this, arguments);
    this.types = {
      elements: [Actor, Case],
      links: [Arrow]
    };
  }

  return UseCase;

})(Diagram);

Diagram.diagrams['UseCase'] = UseCase;

element_add = function(type) {
  var mouse_evt, new_elt, node, nth, x, y;
  x = state.mouse.x;
  y = state.mouse.y;
  nth = diagram.elements.filter(function(elt) {
    return elt instanceof type;
  }).length + 1;
  new_elt = new type(x, y, "" + type.name + " #" + nth, true);
  diagram.elements.push(new_elt);
  if (d3.event) {
    d3.select('.selected').classed('selected', false);
    state.selection = [new_elt];
  }
  svg.sync();
  if (d3.event) {
    node = null;
    d3.selectAll('g.element').each(function(elt) {
      if (elt === new_elt) {
        node = this;
        return d3.select(node).classed('selected', true);
      }
    });
    mouse_evt = document.createEvent('MouseEvent');
    mouse_evt.initMouseEvent(d3.event.type, d3.event.canBubble, d3.event.cancelable, d3.event.view, d3.event.detail, d3.event.screenX, d3.event.screenY, d3.event.clientX, d3.event.clientY, d3.event.ctrlKey, d3.event.altKey, d3.event.shiftKey, d3.event.metaKey, d3.event.button, d3.event.relatedTarget);
    return node.dispatchEvent(mouse_evt);
  }
};

commands = {
  undo: {
    fun: function(e) {
      history.go(-1);
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Undo',
    glyph: 'chevron-left',
    hotkey: 'ctrl+z'
  },
  redo: {
    fun: function(e) {
      history.go(1);
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Redo',
    glyph: 'chevron-right',
    hotkey: 'ctrl+y'
  },
  save: {
    fun: function(e) {
      save();
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Save locally',
    glyph: 'save',
    hotkey: 'ctrl+s'
  },
  edit: {
    fun: function() {
      edit((function() {
        if (state.selection.length === 1) {
          return state.selection[0].txt;
        } else {
          return '';
        }
      }), (function(txt) {
        var elt, _i, _len, _ref9, _results;
        _ref9 = state.selection;
        _results = [];
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          elt = _ref9[_i];
          _results.push(elt.text = txt);
        }
        return _results;
      }));
      return svg.sync();
    },
    label: 'Edit elements text',
    glyph: 'edit',
    hotkey: 'e'
  },
  remove: {
    fun: function() {
      var elt, lnk, _i, _j, _len, _len1, _ref10, _ref9;
      _ref9 = state.selection;
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        elt = _ref9[_i];
        diagram.elements.splice(diagram.elements.indexOf(elt), 1);
        _ref10 = diagram.links.slice();
        for (_j = 0, _len1 = _ref10.length; _j < _len1; _j++) {
          lnk = _ref10[_j];
          if (elt === lnk.source || elt === lnk.target) {
            diagram.links.splice(diagram.links.indexOf(lnk), 1);
          }
        }
      }
      state.selection = [];
      d3.selectAll('g.element').classed('selected', false);
      return svg.sync();
    },
    label: 'Remove elements',
    glyph: 'remove-sign',
    hotkey: 'del'
  },
  select_all: {
    fun: function(e) {
      state.selection = diagram.elements.slice();
      d3.selectAll('g.element').classed('selected', true);
      return e != null ? e.preventDefault() : void 0;
    },
    label: 'Select all elements',
    glyph: 'fullscreen',
    hotkey: 'ctrl+a'
  },
  reorganize: {
    fun: function() {
      var elt, sel, _i, _len;
      sel = state.selection.length > 0 ? state.selection : diagram.elements;
      for (_i = 0, _len = sel.length; _i < _len; _i++) {
        elt = sel[_i];
        elt.fixed = false;
      }
      return svg.sync();
    },
    label: 'Reorganize',
    glyph: 'th',
    hotkey: 'r'
  },
  freemode: {
    fun: function() {
      var elt, _i, _len, _ref9;
      _ref9 = diagram.elements;
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        elt = _ref9[_i];
        elt.fixed = state.freemode;
      }
      if (state.freemode) {
        svg.force.stop();
      } else {
        svg.sync();
      }
      return state.freemode = !state.freemode;
    },
    label: 'Toggle free mode',
    glyph: 'send',
    hotkey: 'tab'
  },
  link: {
    fun: function() {
      var elt, _i, _len, _ref9;
      state.linking = [];
      _ref9 = state.selection;
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        elt = _ref9[_i];
        state.linking.push(new Link(elt, state.mouse));
      }
      return svg.sync();
    },
    label: 'Link elements',
    glyph: 'arrow-right',
    hotkey: 'l'
  },
  linkstyle: {
    fun: function() {
      diagram.linkstyle = (function() {
        switch (diagram.linkstyle) {
          case 'curve':
            return 'diagonal';
          case 'diagonal':
            return 'rectangular';
          case 'rectangular':
            return 'curve';
        }
      })();
      return svg.tick();
    },
    label: 'Change link style',
    glyph: 'retweet',
    hotkey: 'space'
  },
  defaultscale: {
    fun: function() {
      svg.zoom.scale(1);
      svg.zoom.translate([0, 0]);
      return svg.zoom.event(svg.underlay_g);
    },
    label: 'Reset view',
    glyph: 'screenshot',
    hotkey: 'ctrl+backspace'
  },
  snaptogrid: {
    fun: function() {
      var elt, _i, _len, _ref9;
      _ref9 = diagram.elements;
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        elt = _ref9[_i];
        elt.x = elt.px = state.snap * Math.floor(elt.x / state.snap);
        elt.y = elt.py = state.snap * Math.floor(elt.y / state.snap);
      }
      return svg.tick();
    },
    label: 'Snap to grid',
    glyph: 'magnet',
    hotkey: 'ctrl+space'
  }
};

$(function() {
  var button, command, name, _results;
  _results = [];
  for (name in commands) {
    command = commands[name];
    button = d3.select('aside').append('button').attr('title', "" + command.label + " [" + command.hotkey + "]").attr('class', 'btn btn-default btn-sm').on('click', command.fun);
    if (command.glyph) {
      button.append('span').attr('class', "glyphicon glyphicon-" + command.glyph);
    }
    _results.push(Mousetrap.bind(command.hotkey, command.fun));
  }
  return _results;
});

init_commands = function() {
  var e, fun, hotkey, i, key, taken_hotkeys, _i, _len, _ref9, _results;
  taken_hotkeys = [];
  $('aside button.specific').each(function() {
    return Mousetrap.unbind($(this).attr('data-hotkey'));
  });
  $('aside .specific').remove();
  $('aside').append($('<h3>').attr('id', diagram.constructor.name).addClass('specific').text(diagram.constructor.label));
  _ref9 = diagram.types.elements;
  _results = [];
  for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
    e = _ref9[_i];
    i = 1;
    key = e.name[0].toLowerCase();
    while (i < e.length && __indexOf.call(taken_hotkeys, key) >= 0) {
      key = e[i++].toLowerCase();
    }
    taken_hotkeys.push(key);
    fun = (function(elt) {
      return function(evt) {
        return element_add(elt, evt);
      };
    })(e);
    hotkey = "a " + key;
    d3.select('aside').append('button').attr('class', 'btn btn-default btn-block btn-sm draggable specific').attr('title', "" + e.name + " [" + hotkey + "]").attr('data-hotkey', hotkey).text(e.name).on('mousedown', fun);
    _results.push(Mousetrap.bind(hotkey, fun));
  }
  return _results;
};

edit = function(getter, setter) {
  var overlay, textarea, textarea_node;
  overlay = d3.select('#overlay').classed('visible', true);
  textarea = overlay.select('textarea');
  textarea_node = textarea.node();
  textarea.on('input', function() {
    setter(this.value);
    return svg.sync();
  }).on('keydown', function() {
    if (d3.event.keyCode === 27) {
      textarea.on('input', null);
      textarea.on('keydown', null);
      textarea_node.value = '';
      return overlay.classed('visible', false);
    }
  });
  textarea_node.value = getter();
  textarea_node.select();
  textarea_node.focus();
  return overlay.on('click', function() {
    if (d3.event.target === this) {
      textarea.on('input', null);
      textarea.on('keydown', null);
      textarea_node.value = '';
      return overlay.classed('visible', false);
    }
  });
};

State = (function() {
  function State() {
    this.selection = [];
    this.snap = 25;
    this.no_save = false;
    this.dragging = false;
    this.mouse = new Mouse(0, 0, '');
    this.linking = [];
    this.freemode = false;
    this.scale = 1;
    this.translate = [0, 0];
  }

  return State;

})();

state = new State();

mouse_xy = function(e) {
  var m;
  m = d3.mouse(e);
  return {
    x: (m[0] - state.translate[0]) / state.scale,
    y: (m[1] - state.translate[1]) / state.scale
  };
};

Svg = (function() {
  function Svg() {
    this.tick = __bind(this.tick, this);
    var _this = this;
    this.aside = d3.select('aside');
    this.article = d3.select("article");
    this.width = this.article.node().clientWidth;
    this.height = this.article.node().clientHeight || 500;
    this.title = d3.select('#editor h2').on('dblclick', function() {
      return edit((function() {
        return diagram.title;
      }), (function(txt) {
        return diagram.title = txt;
      }));
    });
    this.svg = this.article.append("svg").attr("width", this.width).attr("height", this.height);
    this.underlay_g = this.svg.append('g');
    this.underlay = this.underlay_g.append('rect').attr('class', 'underlay').attr('width', this.width).attr('height', this.height).attr('fill', 'url(#grid)');
    d3.select(window).on('resize', function() {
      return _this.resize();
    });
    this.defs = this.svg.append('svg:defs');
    this.defs.append('svg:marker').attr('id', 'arrow').attr('viewBox', '0 0 10 10').attr('refX', 10).attr('refY', 5).attr('markerUnits', 'userSpaceOnUse').attr('markerWidth', 10).attr('markerHeight', 10).attr('orient', 'auto').append('svg:path').attr('d', 'M 0 0 L 10 5 L 0 10');
    this.pattern = this.defs.append('svg:pattern').attr('id', 'grid').attr('viewBox', '0 0 10 10').attr('x', 0).attr('y', 0).attr('width', state.snap).attr('height', state.snap).attr('patternUnits', 'userSpaceOnUse');
    this.pattern.append('svg:path').attr('d', 'M 10 0 L 0 0 L 0 10');
    this.root = this.underlay_g.append('g').attr('class', 'root');
    this.force = d3.layout.force().gravity(.2).linkDistance(300).charge(-5000).size([this.width, this.height]);
    this.drag = this.force.drag().on("drag.force", function(elt) {
      var delta, _i, _len, _ref10, _ref9;
      if (!state.dragging || d3.event.sourceEvent.ctrlKey) {
        return;
      }
      if (_ref9 = !elt, __indexOf.call(state.selection, _ref9) >= 0) {
        state.selection.push(elt);
      }
      if (d3.event.sourceEvent.shiftKey) {
        delta = {
          x: elt.px - d3.event.x,
          y: elt.py - d3.event.y
        };
      } else {
        delta = {
          x: elt.px - state.snap * Math.floor(d3.event.x / state.snap),
          y: elt.py - state.snap * Math.floor(d3.event.y / state.snap)
        };
      }
      _ref10 = state.selection;
      for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
        elt = _ref10[_i];
        elt.px -= delta.x;
        elt.py -= delta.y;
      }
      return _this.force.resume();
    }).on('dragstart', function() {
      if (d3.event.sourceEvent.which === 3 || d3.event.sourceEvent.ctrlKey) {
        return;
      }
      return state.dragging = true;
    }).on('dragend', function(elt) {
      state.dragging = false;
      if (!state.freemode) {
        return elt.fixed = true;
      }
    });
    this.element = null;
    this.link = null;
    this.svg.on("mousedown", function(event) {
      var elt, mouse, _i, _len, _ref9;
      if (state.dragging || d3.event.ctrlKey || d3.event.which === 2) {
        return;
      }
      if (d3.event.which === 3) {
        state.linking = [];
        _ref9 = state.selection;
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          elt = _ref9[_i];
          state.linking.push(new Arrow(elt, state.mouse));
        }
        _this.sync();
      } else {
        if (!d3.event.shiftKey) {
          d3.selectAll('.selected').classed('selected', false);
          state.selection = [];
        }
        mouse = mouse_xy(_this.svg.node());
        _this.svg.select('g.overlay').append("rect").attr({
          "class": "selection",
          x: mouse.x,
          y: mouse.y,
          width: 0,
          height: 0
        });
      }
      return d3.event.preventDefault();
    }).on('contextmenu', function() {
      if (!d3.event.shiftKey) {
        return d3.event.preventDefault();
      }
    });
    d3.select(window).on("mousemove", function() {
      var mouse, move, rect, sel;
      if (d3.event.ctrlKey) {
        return;
      }
      mouse = mouse_xy(_this.svg.node());
      state.mouse.x = mouse.x;
      state.mouse.y = mouse.y;
      if (state.linking.length) {
        _this.tick();
        return;
      }
      sel = _this.svg.select("rect.selection");
      if (!sel.empty()) {
        rect = {
          x: +sel.attr("x"),
          y: +sel.attr("y"),
          width: +sel.attr("width"),
          height: +sel.attr("height")
        };
        move = {
          x: mouse.x - rect.x,
          y: mouse.y - rect.y
        };
        if (move.x < 1 || (move.x * 2 < rect.width)) {
          rect.x = mouse.x;
          rect.width -= move.x;
        } else {
          rect.width = move.x;
        }
        if (move.y < 1 || (move.y * 2 < rect.height)) {
          rect.y = mouse.y;
          rect.height -= move.y;
        } else {
          rect.height = move.y;
        }
        sel.attr(rect);
        d3.selectAll('g.element').each(function(elt) {
          var g, selected;
          g = d3.select(this);
          selected = g.classed('selected');
          if (elt["in"](rect) && !selected) {
            state.selection.push(elt);
            return g.classed('selected', true);
          } else if (!elt["in"](rect) && selected && !d3.event.shiftKey) {
            state.selection.splice(state.selection.indexOf(elt), 1);
            return g.classed('selected', false);
          }
        });
        return d3.event.preventDefault();
      }
    }).on("mouseup", function() {
      if (d3.event.ctrlKey) {
        return;
      }
      if (state.linking.length) {
        state.linking = [];
        _this.sync();
      }
      _this.svg.selectAll("rect.selection").remove();
      return d3.event.preventDefault();
    }).on("keydown", function() {
      if (d3.event.ctrlKey) {
        return _this.underlay.classed('move', true);
      }
    }).on("keyup", function() {
      return _this.underlay.classed('move', false);
    });
    this.root.append('g').attr('class', 'links');
    this.root.append('g').attr('class', 'elements');
    this.root.append('g').attr('class', 'overlay');
    this.zoom = d3.behavior.zoom().scale(1).scaleExtent([.15, 5]).on("zoom", function() {
      var _ref9;
      if (!d3.event.sourceEvent || ((_ref9 = d3.event.sourceEvent.type) === 'wheel' || _ref9 === 'click') || d3.event.sourceEvent.ctrlKey || d3.event.sourceEvent.which === 2) {
        state.translate = d3.event.translate;
        state.scale = d3.event.scale;
        _this.root.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
        return _this.pattern.attr("patternTransform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
      } else {
        _this.zoom.scale(state.scale);
        return _this.zoom.translate(state.translate);
      }
    });
    this.underlay_g.call(this.zoom);
    this.force.on('tick', this.tick).on('end', function() {
      var elt, _i, _len, _ref9;
      if (!state.freemode) {
        _ref9 = diagram.elements;
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          elt = _ref9[_i];
          elt.fixed = true;
        }
      }
      _this.tick();
      return generate_url();
    });
  }

  Svg.prototype.sync = function() {
    var element_g, link_g,
      _this = this;
    this.force.nodes(diagram.elements).links(diagram.links);
    this.link = this.svg.select('g.links').selectAll('g.link').data(diagram.links.concat(state.linking));
    this.title.text(diagram.title);
    link_g = this.link.enter().append('g').attr("class", "link");
    link_g.append("path").attr("marker-end", "url(#arrow)");
    link_g.append("text").attr('class', "start");
    link_g.append("text").attr('class', "end");
    link_g.on('dblclick', function(lnk) {
      var nearest;
      if (d3.event.ctrlKey) {
        return;
      }
      nearest = lnk.nearest(state.mouse);
      if (nearest === lnk.source) {
        return edit((function() {
          return lnk.text.source;
        }), (function(txt) {
          return lnk.text.source = txt;
        }));
      } else {
        return edit((function() {
          return lnk.text.target;
        }), (function(txt) {
          return lnk.text.target = txt;
        }));
      }
    });
    this.element = this.svg.select('g.elements').selectAll('g.element').data(diagram.elements);
    element_g = this.element.enter().append('g').attr('class', 'element').call(this.drag).on("mousedown", function(elt) {
      var selected;
      if (d3.event.ctrlKey) {
        return;
      }
      selected = d3.select(this).classed('selected');
      if ((selected && !state.dragging) || (!selected) && !d3.event.shiftKey) {
        d3.selectAll('.selected').classed('selected', false);
        state.selection = [elt];
        d3.select(this).classed('selected', true);
      }
      if (d3.event.shiftKey && !selected) {
        d3.select(this).classed('selected', true);
        return state.selection.push(elt);
      }
    }).on("mousemove", function(elt) {
      var lnk, _i, _len, _ref9, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref9 = state.linking;
      _results = [];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        lnk = _ref9[_i];
        _results.push(lnk.target = elt);
      }
      return _results;
    }).on("mouseout", function(elt) {
      var lnk, _i, _len, _ref9, _results;
      if (d3.event.ctrlKey) {
        return;
      }
      _ref9 = state.linking;
      _results = [];
      for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
        lnk = _ref9[_i];
        _results.push(lnk.target = state.mouse);
      }
      return _results;
    }).on("mouseup", function(elt) {
      var lnk, _i, _len, _ref9;
      if (d3.event.ctrlKey) {
        return;
      }
      if (state.linking.length) {
        _ref9 = state.linking;
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          lnk = _ref9[_i];
          if (lnk.source !== elt) {
            diagram.links.push(new Arrow(lnk.source, elt));
          }
        }
        state.linking = [];
        _this.sync();
        return d3.event.preventDefault();
      }
    }).on('dblclick', function(elt) {
      if (d3.event.ctrlKey) {
        return;
      }
      return edit((function() {
        return elt.text;
      }), (function(txt) {
        return elt.text = txt;
      }));
    });
    element_g.append('path').attr('class', 'shape');
    element_g.append('text');
    this.element.select('text').each(function(elt) {
      var i, line, tspan, txt, _i, _len, _ref9, _results;
      txt = d3.select(this);
      if (elt.text === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref9 = elt.text.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref9.length; _i < _len; i = ++_i) {
        line = _ref9[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }).each(function(elt) {
      return elt._txt_bbox = this.getBBox();
    }).attr('y', function(elt) {
      return -elt._txt_bbox.height / 2;
    });
    this.link.select('path').attr('d', function(lnk) {
      return lnk.path();
    });
    this.link.select('text.start').each(function(lnk) {
      var i, line, tspan, txt, _i, _len, _ref9, _results;
      txt = d3.select(this);
      if (lnk.text.source === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref9 = lnk.text.source.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref9.length; _i < _len; i = ++_i) {
        line = _ref9[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    this.link.select('text.end').each(function(lnk) {
      var i, line, tspan, txt, _i, _len, _ref9, _results;
      txt = d3.select(this);
      if (!lnk.text.target === txt.text) {
        return;
      }
      txt.selectAll('tspan').remove();
      _ref9 = lnk.text.target.split('\n');
      _results = [];
      for (i = _i = 0, _len = _ref9.length; _i < _len; i = ++_i) {
        line = _ref9[i];
        tspan = txt.append('tspan').text(line).attr('x', 0);
        if (i !== 0) {
          _results.push(tspan.attr('dy', '1.2em'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    this.element.select('path.shape').attr('d', function(elt) {
      return elt.path();
    });
    this.element.exit().remove();
    this.link.exit().remove();
    this.tick();
    return this.force.start();
  };

  Svg.prototype.tick = function() {
    var elt, need_force, _i, _len, _ref9;
    need_force = false;
    _ref9 = diagram.elements;
    for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
      elt = _ref9[_i];
      if (!elt.fixed) {
        need_force = true;
        break;
      }
    }
    need_force = need_force && (state.freemode || (this.force.alpha() || 1) > .03);
    if (!need_force && !state.dragging) {
      this.force.stop();
    }
    this.element.attr("transform", (function(elt) {
      return "translate(" + elt.x + "," + elt.y + ")";
    })).each(function(elt) {
      return d3.select(this).classed('moving', !elt.fixed);
    });
    this.link.select('path').attr("d", function(lnk) {
      return lnk.path();
    });
    this.link.select('text.start').attr('transform', function(lnk) {
      return "translate(" + lnk.a1.x + ", " + lnk.a1.y + ")";
    }).attr('dx', function(lnk) {
      var _ref10;
      if ((_ref10 = lnk.d1) === 'N' || _ref10 === 'E') {
        return lnk.text_margin + this.getBBox().width / 2;
      } else {
        return -(lnk.text_margin + this.getBBox().width / 2);
      }
    }).attr('dy', function(lnk) {
      var _ref10;
      if ((_ref10 = lnk.d1) === 'N' || _ref10 === 'E') {
        return -(this.getBBox().height + lnk.text_margin);
      } else {
        return lnk.text_margin;
      }
    });
    return this.link.select('text.end').attr('transform', function(lnk) {
      return "translate(" + lnk.a2.x + ", " + lnk.a2.y + ")";
    }).attr('dx', function(lnk) {
      var _ref10;
      if ((_ref10 = lnk.d2) === 'N' || _ref10 === 'E') {
        return lnk.text_margin + this.getBBox().width / 2;
      } else {
        return -(lnk.text_margin + this.getBBox().width / 2);
      }
    }).attr('dy', function(lnk) {
      var _ref10;
      if ((_ref10 = lnk.d2) === 'N' || _ref10 === 'E') {
        return -(this.getBBox().height + lnk.text_margin);
      } else {
        return lnk.text_margin;
      }
    });
  };

  Svg.prototype.resize = function() {
    this.width = this.article.node().clientWidth;
    this.height = this.article.node().clientHeight || 500;
    this.svg.attr("width", this.width).attr("height", this.height);
    return this.underlay.attr("width", this.width).attr("height", this.height);
  };

  return Svg;

})();

load = function(data) {
  var Type, element, elt, link, lnk, _i, _j, _len, _len1, _ref10, _ref9;
  Type = Diagram.diagrams[data.name];
  window.diagram = new Type();
  diagram.title = data.title;
  diagram.linkstyle = data.linkstyle;
  _ref9 = data.elements;
  for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
    elt = _ref9[_i];
    element = diagram.element(elt.name);
    diagram.elements.push(new element(elt.x, elt.y, elt.text, elt.fixed));
  }
  _ref10 = data.links;
  for (_j = 0, _len1 = _ref10.length; _j < _len1; _j++) {
    lnk = _ref10[_j];
    link = diagram.link(lnk.name);
    diagram.links.push(new link(diagram.elements[lnk.source], diagram.elements[lnk.target], lnk.text));
  }
  return state.selection = [];
};

save = function() {
  return localStorage.setItem("" + diagram.constructor.name + "|" + diagram.title, diagram.hash());
};

generate_url = function() {
  var hash;
  if (state.no_save) {
    state.no_save = false;
    return;
  }
  hash = '#' + diagram.hash();
  if (location.hash !== hash) {
    return history.pushState(null, null, hash);
  }
};

history_pop = function() {
  var $diagrams, $editor;
  $diagrams = $('#diagrams');
  $editor = $('#editor');
  if (!location.hash) {
    $diagrams.removeClass('hidden');
    $editor.addClass('hidden');
    list_diagrams();
    return;
  } else {
    $editor.removeClass('hidden');
    $diagrams.addClass('hidden');
    if (typeof svg === "undefined" || svg === null) {
      window.svg = new Svg();
    }
  }
  load(JSON.parse(atob(location.hash.slice(1))));
  if (diagram.constructor.name !== $('aside h3').attr('id')) {
    init_commands();
    svg.resize();
  }
  state.no_save = true;
  return svg.sync();
};

list_diagrams = function() {
  var $tbody, $tr, $ul, b64_diagram, diagram, key, name, title, type, _ref10, _ref9, _results;
  $tbody = $('#diagrams tbody');
  $tbody.find('.local').remove();
  for (key in localStorage) {
    b64_diagram = localStorage[key];
    _ref9 = key.split('|'), type = _ref9[0], title = _ref9[1];
    $tbody.append($tr = $('<tr>'));
    $tr.addClass('local').append($('<td>').text(title), $('<td>').text(Diagram.diagrams[type].label), $('<td>').append($('<a>').attr('href', "#" + b64_diagram).text('⬈')));
  }
  $ul = $('#diagrams ul');
  $ul.children().remove();
  _ref10 = Diagram.diagrams;
  _results = [];
  for (name in _ref10) {
    diagram = _ref10[name];
    b64_diagram = (new diagram()).hash();
    _results.push($ul.append($('<li>').append($('<a>').attr('href', "#" + b64_diagram).text("New " + diagram.label))));
  }
  return _results;
};

$(function() {
  list_diagrams();
  _this.addEventListener("popstate", history_pop);
  if (location.hash && _this.mozInnerScreenX !== null) {
    return history_pop();
  }
});
