// Generated by CoffeeScript 1.6.3
(function() {
  var Element, Link, Lozenge, Square, drag, draw, e1, e2, e3, e4, l1, l2, l3, l4, margin, svg, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  Element = (function() {
    function Element(x, y, text) {
      this.x = x;
      this.y = y;
      this.text = text;
      this.height = __bind(this.height, this);
      this.width = __bind(this.width, this);
      this._margin = {
        x: 10,
        y: 5
      };
    }

    Element.prototype.center = function() {
      return {
        x: this.x + (this._txt_bbox && this._txt_bbox.width || 0) / 2 + this._margin.x,
        y: this.y + (this._txt_bbox && this._txt_bbox.height || 0) / 2 + this._margin.y
      };
    };

    Element.prototype.width = function() {
      return this._txt_bbox.width + 2 * this._margin.x;
    };

    Element.prototype.height = function() {
      return this._txt_bbox.height + 2 * this._margin.y;
    };

    return Element;

  })();

  Square = (function(_super) {
    __extends(Square, _super);

    function Square() {
      _ref = Square.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Square.prototype.path = function() {
      return "M 0 0 L " + (this.width()) + " 0 L " + (this.width()) + " " + (this.height()) + " L 0 " + (this.height()) + " z";
    };

    return Square;

  })(Element);

  Lozenge = (function(_super) {
    __extends(Lozenge, _super);

    function Lozenge() {
      _ref1 = Lozenge.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Lozenge.prototype.path = function() {
      return "M -10 0 L " + (this.width()) + " 0 L " + (this.width() + 10) + " " + (this.height()) + " L 0 " + (this.height()) + " z";
    };

    return Lozenge;

  })(Element);

  Link = (function() {
    function Link(elt1, elt2) {
      this.elt1 = elt1;
      this.elt2 = elt2;
      this.target = __bind(this.target, this);
      this.source = __bind(this.source, this);
    }

    Link.prototype.source = function() {
      return this.elt1.center();
    };

    Link.prototype.target = function() {
      return this.elt2.center();
    };

    return Link;

  })();

  e1 = new Lozenge(1, 2, 'Yop');

  e2 = new Square(343, 232, "That's right");

  e3 = new Lozenge(130, 622, 'So whatÂ ?');

  e4 = new Square(532, 92, "WTF");

  l1 = new Link(e1, e2);

  l2 = new Link(e1, e3);

  l3 = new Link(e2, e4);

  l4 = new Link(e4, e1);

  this.data = {
    elements: [e1, e2, e3, e4],
    links: [l1, l2, l3, l4]
  };

  svg = null;

  drag = d3.behavior.drag().origin(Object).on("drag", function(elt) {
    elt.x = d3.event.x;
    elt.y = d3.event.y;
    return draw();
  });

  draw = function() {
    var diagonal, element, elements, links;
    diagonal = d3.svg.diagonal().source(function(elt) {
      return elt.source();
    }).target(function(elt) {
      return elt.target();
    }).projection(function(d) {
      return [d.x, d.y];
    });
    links = svg.selectAll('path.link').data(_this.data.links);
    links.enter().append("path").attr("class", "link");
    elements = svg.selectAll('g.element').data(_this.data.elements);
    element = elements.enter().append('g').attr('class', 'element').call(drag);
    element.append('path').attr('class', 'shape');
    element.append('text').attr('x', function(elt) {
      return elt._margin.x;
    }).attr('y', function(elt) {
      return elt._margin.y;
    });
    elements.attr('transform', function(elt) {
      return "translate(" + elt.x + ", " + elt.y + ")";
    });
    elements.select('text').text(function(elt) {
      return elt.text;
    }).each(function(elt) {
      return elt._txt_bbox = this.getBBox();
    });
    elements.select('path.shape').attr('d', function(elt) {
      return elt.path();
    });
    elements.exit().remove();
    links.attr("d", diagonal);
    return links.exit().remove();
  };

  margin = {
    top: 20,
    right: 20,
    bottom: 30,
    left: 40
  };

  svg = d3.select("#viz").append("svg:svg").attr("width", this.innerWidth).attr("height", this.innerHeight - 25);

  d3.select('body').on('keydown', function() {
    return data.elements.push(new Square(Math.random() * _this.innerWidth, Math.random() * _this.innerHeight, Math.random().toString()));
  });

  draw();

}).call(this);
