// Generated by CoffeeScript 1.6.3
var end, i, node, tok;

module("dot tokenization");

i = 0;

tok = null;

node = function(type, value) {
  ok(tok[i] instanceof type);
  return equal(tok[i++].value, value);
};

end = function() {
  return ok(tok[i] == null);
};

test("simple tokenization", function() {
  i = 0;
  tok = dot_tokenize('graph {}');
  node(Keyword, 'graph');
  node(Brace, '{');
  node(Brace, '}');
  return end();
});

test("tokenization normal", function() {
  i = 0;
  tok = dot_tokenize("graph graphname {\n   a -- b -- c;\n   b -- d;\n}");
  node(Keyword, 'graph');
  node(Id, 'graphname');
  node(Brace, '{');
  node(Id, 'a');
  node(Operator, '--');
  node(Id, 'b');
  node(Operator, '--');
  node(Id, 'c');
  node(Delimiter, ';');
  node(Id, 'b');
  node(Operator, '--');
  node(Id, 'd');
  node(Delimiter, ';');
  node(Brace, '}');
  return end();
});

test("tokenization directed", function() {
  i = 0;
  tok = dot_tokenize("digraph graphname {\n   a -> b -> c;\n   b -> d;\n}");
  node(Keyword, 'digraph');
  node(Id, 'graphname');
  node(Brace, '{');
  node(Id, 'a');
  node(Operator, '->');
  node(Id, 'b');
  node(Operator, '->');
  node(Id, 'c');
  node(Delimiter, ';');
  node(Id, 'b');
  node(Operator, '->');
  node(Id, 'd');
  node(Delimiter, ';');
  node(Brace, '}');
  return end();
});

test("tokenization with quoted strings", function() {
  i = 0;
  tok = dot_tokenize("digraph \"Graph name\" {\n   \"Node with \\\" in it\" -> \"Node with\nline break\";\n}");
  node(Keyword, 'digraph');
  node(Id, 'Graph name');
  node(Brace, '{');
  node(Id, 'Node with " in it');
  node(Operator, '->');
  node(Id, 'Node with\nline break');
  node(Delimiter, ';');
  node(Brace, '}');
  return end();
});

test("tokenization with attributes", function() {
  i = 0;
  tok = dot_tokenize("graph ethane {\n    C_0 -- H_0 [type=s];\n    C_0 -- H_1 [type=s];\n    C_0 -- H_2 [type=s];\n    C_0 -- C_1 [type=s];\n    C_1 -- H_3 [type=s];\n    C_1 -- H_4 [type=s];\n    C_1 -- H_5 [type=s];\n}");
  node(Keyword, 'graph');
  node(Id, 'ethane');
  node(Brace, '{');
  node(Id, 'C_0');
  node(Operator, '--');
  node(Id, 'H_0');
  node(Brace, '[');
  node(Id, 'type');
  node(Assign, '=');
  node(Id, 's');
  node(Brace, ']');
  node(Delimiter, ';');
  node(Id, 'C_0');
  node(Operator, '--');
  node(Id, 'H_1');
  node(Brace, '[');
  node(Id, 'type');
  node(Assign, '=');
  node(Id, 's');
  node(Brace, ']');
  return node(Delimiter, ';');
});

test("tokenization with comments", function() {
  i = 0;
  tok = dot_tokenize("graph graphname {\n    // This attribute applies /to the graph itself\n    size=\"1,1\"; /* size to 1,1 */\n    // The label attribute can be used to change the label of a node\n    a [label=\"Foo\"]; // label to Foo\n    # Here, the node /shape is changed.\n    b [shape=box]; # Shape to box\n    /* These edges both\n       have different /line\n       properties\n    */\n    a -- b -- c [color=blue];\n    b -- d [style=dotted];\n}");
  node(Keyword, 'graph');
  node(Id, 'graphname');
  node(Brace, '{');
  node(Id, 'size');
  node(Assign, '=');
  node(Id, '1,1');
  node(Delimiter, ';');
  node(Id, 'a');
  node(Brace, '[');
  node(Id, 'label');
  node(Assign, '=');
  node(Id, 'Foo');
  node(Brace, ']');
  node(Delimiter, ';');
  node(Id, 'b');
  node(Brace, '[');
  node(Id, 'shape');
  node(Assign, '=');
  node(Id, 'box');
  node(Brace, ']');
  node(Delimiter, ';');
  node(Id, 'a');
  node(Operator, '--');
  node(Id, 'b');
  node(Operator, '--');
  node(Id, 'c');
  node(Brace, '[');
  node(Id, 'color');
  node(Assign, '=');
  node(Id, 'blue');
  node(Brace, ']');
  node(Delimiter, ';');
  node(Id, 'b');
  node(Operator, '--');
  node(Id, 'd');
  node(Brace, '[');
  node(Id, 'style');
  node(Assign, '=');
  node(Id, 'dotted');
  node(Brace, ']');
  node(Delimiter, ';');
  node(Brace, '}');
  return end();
});
